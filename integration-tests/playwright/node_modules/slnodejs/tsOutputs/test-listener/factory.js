"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeAgentFactory = void 0;
const environment_data_service_1 = require("../common/environment-data-service");
const logs_process_1 = require("./logs-process");
const state_tracker_proxy_1 = require("./state-tracker-process/state-tracker-proxy");
const request = require("sl-request");
const agent_1 = require("./agent");
const logger_1 = require("../common/logger");
const log_service_proxy_1 = require("./logs-process/log-service-proxy");
const http_coloring_1 = require("./coloring/http-coloring");
const listening_port_1 = require("./coloring/listening-port");
const test_recommendation_handler_1 = require("./test-recommendation-handler");
const agent_instance_data_1 = require("../common/agent-instance-data");
const agent_events_contracts_1 = require("../common/agent-events/agent-events-contracts");
const sl_env_vars_1 = require("../common/constants/sl-env-vars");
const production_footprints_handler_1 = require("../common/footprints-process/production-footprints-handler");
const footprints_service_proxy_1 = require("../common/footprints-process/footprints-service-proxy");
const events_process_1 = require("../common/events-process");
const queue_1 = require("../common/queue");
const footprints_process_v6_1 = require("../common/footprints-process-v6");
const watchdog_1 = require("../common/watchdog");
const config_process_1 = require("../common/config-process");
const state_tracker_1 = require("../common/state-tracker");
const istanbul_to_footprints_1 = require("../common/footprints-process/istanbul-to-footprints");
const footprints_buffer_1 = require("../common/footprints-process-v6/footprints-buffer");
const relative_path_resolver_1 = require("../common/footprints-process-v6/relative-path-resolver");
const source_map_data_1 = require("../common/footprints-process-v6/source-map-data");
const hits_collector_1 = require("../common/footprints-process-v6/hits-collector");
const hits_converter_1 = require("../common/footprints-process-v6/hits-converter");
const state_tracker_fpv6_1 = require("../common/state-tracker-fpv6");
const remote_agent_1 = require("./remote-agent");
const remote_hits_collector_1 = require("../common/footprints-process-v6/remote-hits-collector");
const remote_footprints_process_1 = require("../common/footprints-process-v6/remote-footprints-process");
const remote_browser_hits_converter_1 = require("../common/footprints-process-v6/remote-browser-hits-converter");
const ts_node_hits_collector_1 = require("./footprints-process/ts-node-hits-collector");
const collector_footprints_buffer_1 = require("../common/footprints-process-v6/collector-footprints-buffer");
const collector_footprints_process_1 = require("../common/footprints-process-v6/collector-footprints-process");
const no_op_state_tracker_1 = require("../common/no-op-state-tracker");
const no_op_config_process_1 = require("../common/config-process/no-op-config-process");
const collector_remote_footprints_process_1 = require("../common/footprints-process-v6/collector-remote-footprints-process");
const backend_proxy_with_default_client_1 = require("../common/http/backend-proxy-with-default-client");
const metrics_store_factory_1 = require("../common/metrics-process/metrics-store-factory");
const metrics_process_1 = require("../common/metrics-process");
class NodeAgentFactory {
    constructor(cfg) {
        if (cfg == null)
            throw new Error('cfg is required');
        NodeAgentFactory.cfg = cfg;
        NodeAgentFactory.getAgentInstanceData(); //Creates a new agent instance (with ID) if required
    }
    static getAgentInstanceData() {
        if (!NodeAgentFactory.agentInstanceData) {
            NodeAgentFactory.agentInstanceData = new agent_instance_data_1.AgentInstanceData(agent_events_contracts_1.AgentTypes.TEST_LISTENER, agent_events_contracts_1.AgentTechnologies.NODEJS);
        }
        return NodeAgentFactory.agentInstanceData;
    }
    getCreateFootprintsHandler() {
        if (!NodeAgentFactory.footprintsHandler) {
            if (sl_env_vars_1.SlEnvVars.inProductionListenerMode()) {
                NodeAgentFactory.footprintsHandler = new production_footprints_handler_1.ProductionFootprintsHandler(NodeAgentFactory.cfg, NodeAgentFactory.getAgentInstanceData(), this.getCreateApplicationLogger().child({ component: 'ProductionFootprintsHandler' }));
            }
            else {
                NodeAgentFactory.footprintsHandler = new footprints_service_proxy_1.FootprintsServiceProxy(NodeAgentFactory.cfg, NodeAgentFactory.getAgentInstanceData(), this.getCreateApplicationLogger().child({ component: 'footprintsHandler' }));
            }
        }
        return NodeAgentFactory.footprintsHandler;
    }
    getCreateEventsProcess() {
        if (!NodeAgentFactory.eventsProcesss) {
            const sendToServerWatchdog = this.createWatchdog({
                autoReset: false,
                name: 'sendToServerWatchdog',
                interval: NodeAgentFactory.cfg.interval.value,
                unref: true
            });
            const keepaliveWatchdog = this.createKeepaliveWatchdog();
            const environmentDataService = this.getCreateEnvironmentDataService();
            const queue = new queue_1.Queue();
            NodeAgentFactory.eventsProcesss = new events_process_1.EventsProcess(NodeAgentFactory.cfg, NodeAgentFactory.agentInstanceData, sendToServerWatchdog, keepaliveWatchdog, environmentDataService.getEnvDataForSubmission(), this.getCreateBackendProxy(), queue, this.getCreateApplicationLogger().child({ component: 'eventsProcess' }));
        }
        return NodeAgentFactory.eventsProcesss;
    }
    getCreateFootprintsProcess() {
        const keepaliveWatchdog = this.createKeepaliveWatchdog();
        const logger = this.getCreateApplicationLogger().child({ component: 'footprintsProcess' });
        if (!NodeAgentFactory.footprintsProcess) {
            NodeAgentFactory.footprintsProcess = this.getCreateFootprintsProcessV6(logger, keepaliveWatchdog);
        }
        this.getCreateConfigProcess().on('configuration_changed', (cfg) => __awaiter(this, void 0, void 0, function* () {
            yield NodeAgentFactory.footprintsProcess.updateConfig(cfg);
        }));
        return NodeAgentFactory.footprintsProcess;
    }
    getCreateCollectorFootprintsProcess() {
        if (NodeAgentFactory.collectorFootprintsProcess) {
            return NodeAgentFactory.collectorFootprintsProcess;
        }
        const keepaliveWatchdog = this.createKeepaliveWatchdog();
        const sendToServerWatchdog = this.createWatchdog({ autoReset: false, name: 'sendToServerWatchdog', interval: NodeAgentFactory.cfg.interval.value, unref: true });
        const logger = this.getCreateApplicationLogger().child({ component: 'collectorFootprintsProcess' });
        return new collector_footprints_process_1.CollectorFootprintsProcess(NodeAgentFactory.cfg, sendToServerWatchdog, keepaliveWatchdog, logger, this.getCreateHitsCollector(), this.getCreateHitsConverter(), this.getCreateCollectorFootprintsBuffer(), this.getCreateCollectorBackendProxy(), this.getCreateNoopStateTracker());
    }
    getCreateCollectorRemoteFootprintsProcess(useRelativeCoverage, disableStateTracker = false) {
        if (NodeAgentFactory.collectorRemoteFootprintsProcess) {
            return NodeAgentFactory.collectorRemoteFootprintsProcess;
        }
        const keepaliveWatchdog = this.createKeepaliveWatchdog();
        const logger = this.getCreateApplicationLogger().child({ component: 'collectorRemotefootprintsProcess' });
        const sendToServerInterval = NodeAgentFactory.cfg.footprintsSendIntervalSecs.value * 1000;
        const sendToServerWatchdog = this.createWatchdog({ autoReset: false, name: 'sendToServerWatchdog', interval: sendToServerInterval, unref: true });
        return new collector_remote_footprints_process_1.CollectorRemoteFootprintsProcess(NodeAgentFactory.cfg, sendToServerWatchdog, keepaliveWatchdog, logger, useRelativeCoverage ? this.getCreateHitsCollector() : this.getCreateRemoteHitsCollector(), useRelativeCoverage ? this.getCreateHitsConverter() : this.getCreateRemoteBrowserHitsConverter(), this.getCreateCollectorFootprintsBuffer(), this.getCreateCollectorBackendProxy(), disableStateTracker ? this.getCreateNoopStateTracker() : this.getCreateStateTracker());
    }
    shouldCreateFootprintsV6() {
        return NodeAgentFactory.cfg.footprintsEnableV6.value && !sl_env_vars_1.SlEnvVars.inProductionListenerMode();
    }
    getCreateFootprintsProcessV6(logger, keepaliveWatchdog) {
        const sendToServerInterval = NodeAgentFactory.cfg.footprintsSendIntervalSecs.value * 1000;
        const sendToServerWatchdog = this.createWatchdog({ autoReset: false, name: 'sendToServerWatchdog', interval: sendToServerInterval, unref: true });
        return new footprints_process_v6_1.FootprintsProcess(NodeAgentFactory.cfg, sendToServerWatchdog, keepaliveWatchdog, logger, this.getCreateHitsCollector(), this.getCreateHitsConverter(), this.getCreateFootprintsBuffer(), this.getCreateBackendProxy(), this.getCreateStateTracker());
    }
    getCreateRemoteFootprintsProcess(useRelativeCoverage, disableStateTracker = false) {
        const keepaliveWatchdog = this.createKeepaliveWatchdog();
        const logger = this.getCreateApplicationLogger().child({ component: 'footprintsProcess' });
        const sendToServerInterval = NodeAgentFactory.cfg.footprintsSendIntervalSecs.value * 1000;
        const sendToServerWatchdog = this.createWatchdog({ autoReset: false, name: 'sendToServerWatchdog', interval: sendToServerInterval, unref: true });
        return new remote_footprints_process_1.RemoteFootprintsProcess(NodeAgentFactory.cfg, sendToServerWatchdog, keepaliveWatchdog, logger, useRelativeCoverage ? this.getCreateHitsCollector() : this.getCreateRemoteHitsCollector(), useRelativeCoverage ? this.getCreateHitsConverter() : this.getCreateRemoteBrowserHitsConverter(), this.getCreateFootprintsBuffer(), this.getCreateBackendProxy(), disableStateTracker ? this.getCreateNoopStateTracker() : this.getCreateStateTracker());
    }
    createWatchdog(opts) {
        return new watchdog_1.Watchdog(opts, { setTimeout: setTimeout, clearTimeout: clearTimeout });
    }
    createKeepaliveWatchdog() {
        return this.createWatchdog({ autoReset: true, name: 'keepalive', interval: 1000, unref: false });
    }
    getCreateConfigProcess() {
        if (!NodeAgentFactory.configProcess) {
            const sendToServerWatchdog = this.createWatchdog({ autoReset: true, name: 'getConfigFromServerWatchdog', interval: 10 * 60 * 1000, unref: true });
            NodeAgentFactory.configProcess = new config_process_1.ConfigProcess(NodeAgentFactory.cfg, sendToServerWatchdog, this.getCreateBackendProxy(), this.getCreateApplicationLogger().child({ component: 'configProcess' }));
        }
        return NodeAgentFactory.configProcess;
    }
    getCreateNoopConfigProcess() {
        if (!NodeAgentFactory.noopConfigProcess) {
            const sendToServerWatchdog = this.createWatchdog({ autoReset: true, name: 'getConfigFromServerWatchdog', interval: 10 * 60 * 1000, unref: true });
            NodeAgentFactory.noopConfigProcess = new no_op_config_process_1.NoopConfigProcess(NodeAgentFactory.cfg, sendToServerWatchdog, this.getCreateBackendProxy(), this.getCreateApplicationLogger().child({ component: 'noopConfigProcess' }));
        }
        return NodeAgentFactory.noopConfigProcess;
    }
    getCreateHttpMetricsProcess() {
        if (!NodeAgentFactory.metricsProcess) {
            const sendToServerWatchdog = this.createWatchdog({ autoReset: true, name: 'metricsProcessWatchdog', interval: 10 * 1000, unref: true });
            const backendProxy = this.getCreateBackendProxy();
            const logger = this.getCreateApplicationLogger().child({ component: 'metricsProcess' });
            const metricStore = metrics_store_factory_1.HttpMetricsStoreFactory.create(logger);
            const environmentDataService = this.getCreateEnvironmentDataService();
            NodeAgentFactory.metricsProcess = new metrics_process_1.HttpMetricsProcess(NodeAgentFactory.cfg, sendToServerWatchdog, backendProxy, logger, metricStore, environmentDataService);
        }
        return NodeAgentFactory.metricsProcess;
    }
    getCreateEnvironmentDataService() {
        if (!NodeAgentFactory.environmentDataService) {
            NodeAgentFactory.environmentDataService = new environment_data_service_1.EnvironmentDataService(NodeAgentFactory.cfg);
        }
        return NodeAgentFactory.environmentDataService;
    }
    getCreateNodeJsAgent() {
        var _a;
        const hasCollectorSetup = !!((_a = NodeAgentFactory.cfg.collectorUrl.value) === null || _a === void 0 ? void 0 : _a.length);
        if (!NodeAgentFactory.nodeJsAgent) {
            const interval = NodeAgentFactory.cfg.footprintsEnableV6.value ?
                NodeAgentFactory.cfg.footprintsCollectIntervalSecs.value * 1000 : NodeAgentFactory.cfg.interval.value;
            NodeAgentFactory.nodeJsAgent = new agent_1.NodeJsAgent(NodeAgentFactory.cfg, hasCollectorSetup ? this.getCreateCollectorFootprintsProcess() : this.getCreateFootprintsProcess(), this.getCreateEventsProcess(), this.getCreateLogsProcess(), hasCollectorSetup ? this.getCreateNoopStateTracker() : this.getCreateStateTracker(), hasCollectorSetup ? this.getCreateNoopConfigProcess() : this.getCreateConfigProcess(), this.getCreateHttpMetricsProcess(), this.createWatchdog({ interval: interval, unref: true, name: 'flushCurrentFootprints', autoReset: true }), this.getCreateColoringProviders(), this.getCreateTestRecommendationHandler(), NodeAgentFactory.getAgentInstanceData(), this.getCreateApplicationLogger().child({ component: 'main' }), this.getCreateBackendProxy());
        }
        return NodeAgentFactory.nodeJsAgent;
    }
    createRemoteAgent(useRelativeCoverage, disableStateTracker = false) {
        var _a;
        NodeAgentFactory.cfg.footprintsEnableV6.value = true;
        NodeAgentFactory.cfg.labId.value = NodeAgentFactory.cfg.labId.value || NodeAgentFactory.cfg.buildSessionId.value;
        const hasCollectorSetup = !!((_a = NodeAgentFactory.cfg.collectorUrl.value) === null || _a === void 0 ? void 0 : _a.length);
        this.getCreateFootprintsProcess();
        return new remote_agent_1.RemoteAgent(NodeAgentFactory.cfg, this.getCreateApplicationLogger(), this.getCreateBackendProxy(), this.getCreateTestRecommendationHandler(), this.getCreateEventsProcess(), hasCollectorSetup ? this.getCreateCollectorRemoteFootprintsProcess(useRelativeCoverage, disableStateTracker) : this.getCreateRemoteFootprintsProcess(useRelativeCoverage, disableStateTracker), this.getCreateHttpMetricsProcess(), useRelativeCoverage ? this.getCreateHitsCollector() : this.getCreateRemoteHitsCollector(), useRelativeCoverage ? this.getCreateHitsConverter() : this.getCreateRemoteBrowserHitsConverter(), disableStateTracker ? this.getCreateNoopStateTracker() : this.getCreateStateTracker(), hasCollectorSetup ? this.getCreateCollectorBackendProxy() : undefined);
    }
    getCreateLogServiceProxy() {
        if (!NodeAgentFactory.logServiceProxy) {
            NodeAgentFactory.logServiceProxy = new log_service_proxy_1.LogServiceProxy(NodeAgentFactory.cfg, request, this.getCreateApplicationLogger().child({ component: 'logsServiceProxy' }));
        }
        return NodeAgentFactory.logServiceProxy;
    }
    getCreateLogsProcess() {
        if (!NodeAgentFactory.logsProcess) {
            const sendToServerWatchdog = this.createWatchdog({ autoReset: false, name: 'sendToServerWatchdog', interval: NodeAgentFactory.cfg.interval.value, unref: true });
            const keepaliveWatchdog = this.createKeepaliveWatchdog();
            NodeAgentFactory.logsProcess = new logs_process_1.LogsProcess(NodeAgentFactory.cfg, logger_1.LoggerFactory.getCreateBufferingLogger(), this.getCreateLogServiceProxy(), this.getCreateEnvironmentDataService(), NodeAgentFactory.getAgentInstanceData(), sendToServerWatchdog, keepaliveWatchdog, this.getCreateApplicationLogger().child({ component: 'logsProcess' }));
        }
        return NodeAgentFactory.logsProcess;
    }
    getCreateStateTracker() {
        if (!NodeAgentFactory.stateTracker) {
            const v6Enabled = NodeAgentFactory.cfg.footprintsEnableV6.value;
            const interval = v6Enabled ?
                NodeAgentFactory.cfg.executionQueryIntervalSecs.value * 1000 : NodeAgentFactory.cfg.interval.value;
            const executionQueryWatchdog = this.createWatchdog({
                autoReset: true,
                interval: interval,
                name: 'testStatus',
                unref: true
            });
            const stateTrackerInstance = v6Enabled ? state_tracker_fpv6_1.StateTrackerFpv6 : state_tracker_1.StateTracker;
            NodeAgentFactory.stateTracker = new stateTrackerInstance(NodeAgentFactory.cfg, this.getCreateConfigProcess(), executionQueryWatchdog, this.getCreateBackendProxy(), this.getCreateApplicationLogger().child({ component: 'stateTrackerProcess' }));
        }
        return NodeAgentFactory.stateTracker;
    }
    getCreateNoopStateTracker() {
        if (!NodeAgentFactory.noopStateTracker) {
            const v6Enabled = NodeAgentFactory.cfg.footprintsEnableV6.value;
            const interval = v6Enabled ?
                NodeAgentFactory.cfg.executionQueryIntervalSecs.value * 1000 : NodeAgentFactory.cfg.interval.value;
            const executionQueryWatchdog = this.createWatchdog({
                autoReset: true,
                interval: interval,
                name: 'testStatus',
                unref: true
            });
            NodeAgentFactory.noopStateTracker = new no_op_state_tracker_1.NoopStateTracker(NodeAgentFactory.cfg, this.getCreateNoopConfigProcess(), executionQueryWatchdog, this.getCreateBackendProxy(), this.getCreateApplicationLogger().child({ component: 'noopStateTracker' }));
        }
        return NodeAgentFactory.noopStateTracker;
    }
    getCreateStateTrackerProxy() {
        if (!NodeAgentFactory.stateTrackerProxy) {
            NodeAgentFactory.stateTrackerProxy = new state_tracker_proxy_1.StateTrackerProxy(NodeAgentFactory.cfg, request, this.getCreateApplicationLogger().child({ component: 'stateTrackerProxy' }));
        }
        return NodeAgentFactory.stateTrackerProxy;
    }
    getCreateIstanbulToFootprintsCoverter() {
        if (!NodeAgentFactory.istanbulToFootprintsConverter) {
            const logger = this.getCreateApplicationLogger().child({ component: 'IstanbulToFootprintsV3' });
            NodeAgentFactory.istanbulToFootprintsConverter = new istanbul_to_footprints_1.IstanbulToFootprints(NodeAgentFactory.cfg, logger);
        }
        return NodeAgentFactory.istanbulToFootprintsConverter;
    }
    getCreateApplicationLogger() {
        if (NodeAgentFactory.applicationLogger == null) {
            NodeAgentFactory.applicationLogger = logger_1.LoggerFactory.getCreateApplicationLogger(NodeAgentFactory.cfg);
        }
        return NodeAgentFactory.applicationLogger;
    }
    getCreateColoringProviders() {
        if (!NodeAgentFactory.coloringProviders) {
            NodeAgentFactory.coloringProviders = [];
            NodeAgentFactory.coloringProviders.push(new http_coloring_1.HttpColoring());
            NodeAgentFactory.coloringProviders.push(new listening_port_1.ListeningPort());
        }
        return NodeAgentFactory.coloringProviders;
    }
    getCreateTestRecommendationHandler() {
        if (!NodeAgentFactory.testRecommendationHandler) {
            const buildSessionId = NodeAgentFactory.cfg.buildSessionId.value;
            const testStage = NodeAgentFactory.cfg.testStage.value;
            const testGroupId = NodeAgentFactory.cfg.testGroupId.value;
            const testRecommendationSleepSeconds = NodeAgentFactory.cfg.testRecommendationSleepSeconds.value;
            const tiaDisabled = NodeAgentFactory.cfg.tiaDisabled.value || NodeAgentFactory.cfg.enforceFullRun.value;
            NodeAgentFactory.testRecommendationHandler = new test_recommendation_handler_1.TestRecommendationHandler(this.getCreateBackendProxy(), this.getCreateEventsProcess(), this.getCreateApplicationLogger(), { buildSessionId, testStage, testGroupId, testRecommendationSleepSeconds, tiaDisabled });
        }
        return NodeAgentFactory.testRecommendationHandler;
    }
    getCreateBackendProxy() {
        if (!NodeAgentFactory.backendProxy) {
            const config = {
                token: NodeAgentFactory.cfg.token.value,
                proxy: NodeAgentFactory.cfg.proxy.value,
                server: NodeAgentFactory.cfg.server.value,
                compressRequests: NodeAgentFactory.cfg.gzip.value,
                buildSessionId: NodeAgentFactory.cfg.buildSessionId.value,
                testProjectId: NodeAgentFactory.cfg.testProjectId.value,
                targetTestProjectId: NodeAgentFactory.cfg.targetTestProjectId.value,
            };
            NodeAgentFactory.backendProxy = backend_proxy_with_default_client_1.BackendProxyFactory.initWithDefaultClient(NodeAgentFactory.agentInstanceData, config, this.getCreateApplicationLogger());
        }
        return NodeAgentFactory.backendProxy;
    }
    getCreateCollectorBackendProxy() {
        if (!NodeAgentFactory.collectorBackendProxy) {
            const config = {
                token: NodeAgentFactory.cfg.token.value,
                proxy: NodeAgentFactory.cfg.proxy.value,
                server: NodeAgentFactory.cfg.collectorUrl.value,
                compressRequests: NodeAgentFactory.cfg.gzip.value,
                buildSessionId: NodeAgentFactory.cfg.buildSessionId.value
            };
            NodeAgentFactory.collectorBackendProxy = backend_proxy_with_default_client_1.BackendProxyFactory.initWithDefaultClient(NodeAgentFactory.agentInstanceData, config, this.getCreateApplicationLogger());
        }
        return NodeAgentFactory.collectorBackendProxy;
    }
    getCreateFootprintsBuffer() {
        if (!NodeAgentFactory.footprintsBuffer) {
            NodeAgentFactory.footprintsBuffer = new footprints_buffer_1.FootprintsBuffer(NodeAgentFactory.agentInstanceData, NodeAgentFactory.cfg);
        }
        return NodeAgentFactory.footprintsBuffer;
    }
    getCreateCollectorFootprintsBuffer() {
        if (!NodeAgentFactory.collectorFootprintsBuffer) {
            NodeAgentFactory.collectorFootprintsBuffer = new collector_footprints_buffer_1.CollectorFootprintsBuffer(NodeAgentFactory.agentInstanceData, NodeAgentFactory.cfg);
        }
        return NodeAgentFactory.collectorFootprintsBuffer;
    }
    getCreateRelativePathResolver() {
        if (!NodeAgentFactory.relativePathResolver) {
            NodeAgentFactory.relativePathResolver = new relative_path_resolver_1.RelativePathResolver(NodeAgentFactory.cfg.projectRoot.value);
        }
        return NodeAgentFactory.relativePathResolver;
    }
    getCreateSourceMapData() {
        if (!NodeAgentFactory.sourceMapData) {
            NodeAgentFactory.sourceMapData = new source_map_data_1.SourceMapData(this.getCreateApplicationLogger().child({ component: 'SourceMapData' }));
        }
        return NodeAgentFactory.sourceMapData;
    }
    getCreateHitsCollector() {
        const enableLineCoverage = NodeAgentFactory.cfg.enableLineCoverage.value;
        if (!NodeAgentFactory.hitsCollector) {
            const logger = this.getCreateApplicationLogger().child({ component: 'HitsCollector' });
            NodeAgentFactory.hitsCollector = NodeAgentFactory.cfg.useTsNode.value ? new ts_node_hits_collector_1.TsNodeHitsCollector(logger, null, enableLineCoverage) : new hits_collector_1.HitsCollector(logger, null, enableLineCoverage);
        }
        return NodeAgentFactory.hitsCollector;
    }
    getCreateRemoteHitsCollector() {
        const enableLineCoverage = NodeAgentFactory.cfg.enableLineCoverage.value;
        if (!NodeAgentFactory.remoteHitsCollector) {
            NodeAgentFactory.remoteHitsCollector = new remote_hits_collector_1.RemoteHitsCollector(this.getCreateApplicationLogger().child({ component: 'HitsCollector' }), null, enableLineCoverage);
        }
        return NodeAgentFactory.remoteHitsCollector;
    }
    getCreateHitsConverter() {
        const enableLineCoverage = NodeAgentFactory.cfg.enableLineCoverage.value;
        const shouldOmitFootprintsLeadingSlash = NodeAgentFactory.cfg.omitFootprintsLeadingSlash.value || sl_env_vars_1.SlEnvVars.CIA.omitFootprintsLeadingSlash();
        if (!NodeAgentFactory.hitsConverter) {
            NodeAgentFactory.hitsConverter = new hits_converter_1.HitsConverter(this.getCreateRelativePathResolver(), this.getCreateSourceMapData(), NodeAgentFactory.cfg.projectRoot.value, this.getCreateApplicationLogger().child({ component: 'HitsConverter' }), shouldOmitFootprintsLeadingSlash, enableLineCoverage);
        }
        return NodeAgentFactory.hitsConverter;
    }
    getCreateRemoteBrowserHitsConverter() {
        const enableLineCoverage = NodeAgentFactory.cfg.enableLineCoverage.value;
        if (!NodeAgentFactory.remoteBrowserHitsConverter) {
            NodeAgentFactory.remoteBrowserHitsConverter = new remote_browser_hits_converter_1.RemoteBrowserHitsConverter(this.getCreateRelativePathResolver(), NodeAgentFactory.cfg.buildSessionId.value, this.getCreateApplicationLogger().child({ component: 'HitsConverter' }), enableLineCoverage);
        }
        return NodeAgentFactory.remoteBrowserHitsConverter;
    }
    /*
        For tests only. reset all static members to isolate tests
     */
    static resetAll() {
        this.cfg = null;
        this.footprintsHandler = null;
        this.eventsProcesss = null;
        this.footprintsProcess = null;
        this.configProcess = null;
        this.environmentDataService = null;
        this.nodeJsAgent = null;
        this.logServiceProxy = null;
        this.logsProcess = null;
        this.stateTracker = null;
        this.stateTrackerProxy = null;
        this.istanbulToFootprintsConverter = null;
        this.applicationLogger = null;
        this.coloringProviders = null;
    }
}
exports.NodeAgentFactory = NodeAgentFactory;
//# sourceMappingURL=factory.js.map