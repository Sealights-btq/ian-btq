"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpMetricsProcess = void 0;
const watchdog_1 = require("../watchdog");
class HttpMetricsProcess {
    constructor(agentConfig, sendToServerWatchdog, backendProxy, logger, metricsStore, 
    /** should be used for performance metric collection */
    environmentDataService) {
        this.agentConfig = agentConfig;
        this.sendToServerWatchdog = sendToServerWatchdog;
        this.backendProxy = backendProxy;
        this.logger = logger;
        this.metricsStore = metricsStore;
        this.environmentDataService = environmentDataService;
        this.isRunning = false;
        this.sendToServerWatchdog.on(watchdog_1.WatchdogEvents.ALARM, () => {
            this.logger.debug('Start submitting metrics');
            this.submitMetrics();
        });
    }
    submitMetrics() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.shouldSubmitMetrics) {
                return;
            }
            const data = this.metricsStore.getMetrics();
            if (!data.metrics.length) {
                this.logger.debug('No metrics collected yet - nothing to submit');
                return;
            }
            try {
                const packet = {
                    start: data.start,
                    end: data.end,
                    metrics: data.metrics,
                };
                yield this.backendProxy.submitAgentMetrics(packet);
                this.logger.debug(JSON.stringify(packet));
                this.metricsStore.flush(packet.end);
            }
            catch (e) {
                this.logger.error(`Error while submitting metrics '${e}'`);
            }
        });
    }
    get shouldSubmitMetrics() {
        if (!this.isRunning) {
            this.logger.debug('Agent is not running, not sending metrics');
            return false;
        }
        if (!this.agentConfig.sendHttpMetrics.value) {
            this.logger.debug('Not sending metrics since agent is not configured to send it.');
            return false;
        }
        return true;
    }
    start() {
        if (this.isRunning)
            return;
        this.isRunning = true;
        this.sendToServerWatchdog.start();
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            this.sendToServerWatchdog.stop();
            if (this.shouldSubmitMetrics) {
                yield this.submitMetrics();
            }
            this.isRunning = false;
        });
    }
}
exports.HttpMetricsProcess = HttpMetricsProcess;
//# sourceMappingURL=index.js.map