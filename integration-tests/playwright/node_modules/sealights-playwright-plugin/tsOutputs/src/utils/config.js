"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SealightsConfig = void 0;
exports.EnsureInitialized = EnsureInitialized;
exports.PrintDebugConfig = PrintDebugConfig;
const logger_1 = __importDefault(require("./logger"));
const const_1 = require("./const");
class SealightsConfig {
    constructor() {
        this.isInitialized = false;
        this.tiaDisabled = false;
    }
    static getInstance() {
        if (!SealightsConfig.instance) {
            SealightsConfig.instance = new SealightsConfig();
        }
        return SealightsConfig.instance;
    }
    init() {
        logger_1.default.debug('Initializing Sealights configuration resolver from environment variables...');
        this.resolveEnvironmentConfig();
        this.isInitialized = true;
    }
    getConfigurationObject() {
        return {
            buildsessionid: this.buildSessionId,
            labid: this.labId,
            token: this.token,
            teststage: this.testStage,
            proxy: this.proxy,
            collectorUrl: this.collectorUrl,
            tiaDisabled: this.tiaDisabled,
        };
    }
    setBuildSessionId(buildSessionId) {
        if (!buildSessionId) {
            throw new Error('buildSessionId cannot be empty');
        }
        logger_1.default.debug(`Updating buildSessionId to: ${buildSessionId}`);
        this.buildSessionId = buildSessionId;
    }
    verifyBuildSessionIdOrLabIdProvided() {
        if (!this.buildSessionId && !this.labId) {
            throw new Error(`Either ${const_1.SL_ENVIRONMENT.BUILD_SESSION_ID} or ${const_1.SL_ENVIRONMENT.LAB_ID} environment variable must be provided.`);
        }
    }
    resolveEnvironmentConfig() {
        this.buildSessionId = SealightsConfig.getEnvVar(const_1.SL_ENVIRONMENT.BUILD_SESSION_ID, true);
        this.token = SealightsConfig.getEnvVar(const_1.SL_ENVIRONMENT.TOKEN);
        this.testStage = SealightsConfig.getEnvVar(const_1.SL_ENVIRONMENT.TEST_STAGE);
        this.labId = SealightsConfig.getEnvVar(const_1.SL_ENVIRONMENT.LAB_ID, true);
        this.proxy = SealightsConfig.getEnvVar(const_1.SL_ENVIRONMENT.PROXY, true);
        this.collectorUrl = SealightsConfig.getEnvVar(const_1.SL_ENVIRONMENT.COLLECTOR_URL, true);
        this.tiaDisabled = SealightsConfig.getEnvVar(const_1.SL_ENVIRONMENT.TIA_DISABLED, true) || false;
        this.verifyBuildSessionIdOrLabIdProvided();
    }
    printDebugConfig() {
        logger_1.default.debug('Configuration:', {
            buildSessionId: this.buildSessionId,
            token: this.token.slice(0, 3) + '...' + this.token.slice(-3),
            testStage: this.testStage,
            labId: this.labId,
            proxy: this.proxy,
            collectorUrl: this.collectorUrl,
            tiaDisabled: this.tiaDisabled,
        });
    }
    static getEnvVar(key, optional = false) {
        const value = process.env[key];
        if (!value) {
            if (optional) {
                logger_1.default.debug(`Optional environment variable ${key} is not set.`);
                return null;
            }
            else {
                const message = `Environment variable ${key} is required but was not found.`;
                logger_1.default.error(message);
                throw new Error(message);
            }
        }
        const lowerValue = value.toLowerCase();
        if (lowerValue === 'true')
            return true;
        if (lowerValue === 'false')
            return false;
        return value;
    }
}
exports.SealightsConfig = SealightsConfig;
__decorate([
    PrintDebugConfig
], SealightsConfig.prototype, "init", null);
__decorate([
    EnsureInitialized
], SealightsConfig.prototype, "getConfigurationObject", null);
__decorate([
    EnsureInitialized,
    PrintDebugConfig
], SealightsConfig.prototype, "setBuildSessionId", null);
function EnsureInitialized(target, propertyKey, descriptor) {
    const originalMethod = descriptor.value;
    descriptor.value = function (...args) {
        if (!this.isInitialized) {
            throw new Error(`Cannot call ${propertyKey} before initialization. Please call init() first.`);
        }
        return originalMethod.apply(this, args);
    };
    return descriptor;
}
function PrintDebugConfig(target, propertyKey, descriptor) {
    const originalMethod = descriptor.value;
    descriptor.value = function (...args) {
        const result = originalMethod.apply(this, args);
        this.printDebugConfig();
        return result;
    };
    return descriptor;
}
//# sourceMappingURL=config.js.map