"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = __importStar(require("sinon"));
const proxyquire_1 = __importDefault(require("proxyquire"));
const path = __importStar(require("path"));
const chai = __importStar(require("chai"));
const sinon_chai_1 = __importDefault(require("sinon-chai"));
const fs = __importStar(require("fs"));
chai.use(sinon_chai_1.default);
describe('processFile', () => {
    const mockFilePath = path.join(__dirname, 'mockFile.js');
    let readFileSyncStub;
    let writeFileSyncStub;
    const mockFS = {
        readFileSync: (filePath) => readFileSyncStub(filePath),
        writeFileSync: (filePath, content) => writeFileSyncStub(filePath, content),
    };
    const { processFile } = (0, proxyquire_1.default)('../src/utils/importReplaceUtility', {
        fs: mockFS,
    });
    beforeEach(() => {
        readFileSyncStub = sinon.stub();
        writeFileSyncStub = sinon.stub();
    });
    afterEach(() => {
        sinon.restore();
    });
    it('should handle single require with test import', () => {
        const inputContent = 'const { test } = require("@playwright/test");';
        const expectedContent = 'const { test } = require("sealights-playwright-plugin");';
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle single import with test import', () => {
        const inputContent = 'import { test } from "@playwright/test";';
        const expectedContent = 'import { test } from "sealights-playwright-plugin";';
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle multiple require destructuring with test', () => {
        const inputContent = "const { test, expect } = require('@playwright/test');";
        const expectedContent = "const { expect } = require('@playwright/test');\nconst { test } = require('sealights-playwright-plugin');";
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle multiple import destructuring with test', () => {
        const inputContent = 'import { test, expect, chromium } from "@playwright/test";';
        const expectedContent = 'import { expect, chromium } from "@playwright/test";\nimport { test } from "sealights-playwright-plugin";';
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle named import with test', () => {
        const inputContent = "import { test as newTest } from '@playwright/test';";
        const expectedContent = "import { test as newTest } from 'sealights-playwright-plugin';";
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle named require with test', () => {
        const inputContent = "const { test: newTest } = require('@playwright/test');";
        const expectedContent = "const { test: newTest } = require('sealights-playwright-plugin');";
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle complex destructuring with non-test imports (require)', () => {
        const inputContent = "const { test, expect, firefox } = require('@playwright/test');";
        const expectedContent = "const { expect, firefox } = require('@playwright/test');\nconst { test } = require('sealights-playwright-plugin');";
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle complex destructuring with non-test imports (import)', () => {
        const inputContent = "import { test, expect, webkit } from '@playwright/test';";
        const expectedContent = "import { expect, webkit } from '@playwright/test';\nimport { test } from 'sealights-playwright-plugin';";
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should not modify files without test import', () => {
        const inputContent = "import { expect } from '@playwright/test';";
        const expectedContent = inputContent;
        readFileSyncStub.returns(inputContent);
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent);
    });
    it('should handle multiple lines of imports and requires', () => {
        const inputContent = `const { test, expect } = require(\'@playwright/test\');\nconst { firefox } = require(\'@playwright/test\');\nimport { test as renamedTest, chromium } from \'@playwright/test\';
    `;
        const expectedContent = `const { expect } = require('@playwright/test');\nconst { test } = require('sealights-playwright-plugin');\nconst { firefox } = require('@playwright/test');\nimport { chromium } from '@playwright/test';\nimport { test as renamedTest } from 'sealights-playwright-plugin';
    `;
        readFileSyncStub.returns(inputContent.trim());
        processFile(mockFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(mockFilePath, expectedContent.trim());
    });
    it('should ensure full file processing equals expected result', () => {
        const originalFilePath = path.join(__dirname, 'mocks/import_variations_original.js');
        const expectedFilePath = path.join(__dirname, 'mocks/import_variations_result.js');
        const expectedContent = fs.readFileSync(expectedFilePath, 'utf-8').trim();
        const originalContent = fs.readFileSync(originalFilePath, 'utf-8').trim();
        readFileSyncStub.returns(originalContent);
        processFile(originalFilePath);
        (0, chai_1.expect)(writeFileSyncStub).to.have.been.calledWith(originalFilePath, expectedContent);
    });
});
//# sourceMappingURL=importReplaceUtility.spec.js.map