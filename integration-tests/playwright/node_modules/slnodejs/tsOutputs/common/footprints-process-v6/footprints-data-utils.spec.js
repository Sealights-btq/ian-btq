"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const footprints_data_utils_1 = require("./footprints-data-utils");
describe("footprints-data-utils", () => {
    describe("hasFootprintsData", () => {
        it("should return false for null packet", () => {
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(null)).to.be.false;
        });
        it("should return false for undefined packet", () => {
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(undefined)).to.be.false;
        });
        it("should return false for packet with undefined methods and branches", () => {
            const packet = {
                formatVersion: "6.0",
                meta: {
                    agentId: "test",
                    labId: "test",
                    intervals: {
                        timedFootprintsCollectionIntervalSeconds: 10,
                    },
                },
                executions: [],
            };
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(packet)).to.be.false;
        });
        it("should return false for packet with empty methods and branches arrays", () => {
            const packet = {
                formatVersion: "6.0",
                meta: {
                    agentId: "test",
                    labId: "test",
                    intervals: {
                        timedFootprintsCollectionIntervalSeconds: 10,
                    },
                },
                methods: [],
                branches: [],
                executions: [],
            };
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(packet)).to.be.false;
        });
        it("should return true for packet with non-empty methods array", () => {
            const packet = {
                formatVersion: "6.0",
                meta: {
                    agentId: "test",
                    labId: "test",
                    intervals: {
                        timedFootprintsCollectionIntervalSeconds: 10,
                    },
                },
                methods: ["method1"],
                branches: [],
                executions: [],
            };
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(packet)).to.be.true;
        });
        it("should return true for packet with non-empty branches array", () => {
            const packet = {
                formatVersion: "6.0",
                meta: {
                    agentId: "test",
                    labId: "test",
                    intervals: {
                        timedFootprintsCollectionIntervalSeconds: 10,
                    },
                },
                methods: [],
                branches: ["branch1"],
                executions: [],
            };
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(packet)).to.be.true;
        });
        it("should return true for packet with both non-empty methods and branches arrays", () => {
            const packet = {
                formatVersion: "6.0",
                meta: {
                    agentId: "test",
                    labId: "test",
                    intervals: {
                        timedFootprintsCollectionIntervalSeconds: 10,
                    },
                },
                methods: ["method1"],
                branches: ["branch1"],
                executions: [],
            };
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(packet)).to.be.true;
        });
        it("should handle packet with null methods array", () => {
            const packet = {
                formatVersion: "6.0",
                meta: {
                    agentId: "test",
                    labId: "test",
                    intervals: {
                        timedFootprintsCollectionIntervalSeconds: 10,
                    },
                },
                methods: null,
                branches: ["branch1"],
                executions: [],
            };
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(packet)).to.be.true;
        });
        it("should handle packet with null branches array", () => {
            const packet = {
                formatVersion: "6.0",
                meta: {
                    agentId: "test",
                    labId: "test",
                    intervals: {
                        timedFootprintsCollectionIntervalSeconds: 10,
                    },
                },
                methods: ["method1"],
                branches: null,
                executions: [],
            };
            (0, chai_1.expect)((0, footprints_data_utils_1.hasFootprintsData)(packet)).to.be.true;
        });
    });
});
//# sourceMappingURL=footprints-data-utils.spec.js.map