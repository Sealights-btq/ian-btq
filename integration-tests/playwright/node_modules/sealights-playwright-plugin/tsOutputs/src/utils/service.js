"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SealightsTestSessionService = void 0;
const slnodejs_1 = require("slnodejs");
const logger_1 = __importDefault(require("./logger"));
const config_1 = require("./config");
const version_1 = require("./version");
class SealightsTestSessionService {
    constructor() {
        this.configurationError = false;
        this.excludedTests = undefined;
        this.SLConfig = config_1.SealightsConfig.getInstance();
    }
    async init() {
        try {
            const remoteAgentConfig = this.SLConfig.getConfigurationObject();
            logger_1.default.debug('Initializing Sealights remote agent creation...');
            this.remoteAgent = await (0, slnodejs_1.createRemoteAgent)(remoteAgentConfig, undefined, undefined, false);
            await this.remoteAgent.start({
                tags: [
                    {
                        name: 'playwright-plugin',
                        version: version_1.version,
                    },
                ],
            });
            if (!remoteAgentConfig.buildsessionid) {
                this.SLConfig.setBuildSessionId(this.remoteAgent.getExecutionData().buildSessionId);
            }
            logger_1.default.info('Sealights remote agent successfully created.');
        }
        catch (error) {
            this.configurationError = true;
            logger_1.default.error('Failed to initialize Sealights test service, the test run will resume without Sealights integration.', error);
        }
    }
    static getInstance() {
        if (!SealightsTestSessionService.instance) {
            SealightsTestSessionService.instance = new SealightsTestSessionService();
        }
        return SealightsTestSessionService.instance;
    }
    shouldSkipTest(testInfo) {
        return this.excludedTests?.[testInfo.title] || false;
    }
    getTestSessionId() {
        return this.remoteAgent.getExecutionData().executionId;
    }
    async createTestSession() {
        const { teststage, buildsessionid, labid } = this.SLConfig.getConfigurationObject();
        logger_1.default.debug('Initiating test session creation with parameters: ', {
            testStage: teststage,
            bsid: buildsessionid,
            labid: labid,
        });
        await this.remoteAgent.startExecution();
        logger_1.default.info('Test session successfully created.');
    }
    async endTestSession() {
        logger_1.default.debug('Initiating test session end...');
        await this.remoteAgent.stop();
        logger_1.default.info('Test session successfully ended.');
    }
    async getTestRecommendations() {
        if (this.excludedTests) {
            return this.excludedTests;
        }
        logger_1.default.debug('Initiating test recommendation retrieval...');
        this.excludedTests = await this.remoteAgent.getExcludedTests();
        logger_1.default.info(`Test recommendation successfully retrieved. ${Object.keys(this.excludedTests).length} tests will be marked for exclusion.`);
        return this.excludedTests;
    }
    async sendTestEvent(testInfo) {
        logger_1.default.debug(`Initiating test event send for test ${testInfo.title} with status ${testInfo.status}, duration ${testInfo.duration} and spec titlePath ${testInfo.titlePath}`);
        const testStartTime = Date.now() - testInfo.duration;
        await this.remoteAgent.testStart(testInfo.title, testInfo.titlePath.join(' '), testStartTime);
        logger_1.default.debug(`Test start event successfully sent for test ${testInfo.title}`);
        await this.remoteAgent.testEnd(testInfo.title, testInfo.titlePath.join(' '), Date.now(), testInfo.status, undefined);
        logger_1.default.debug(`Test end event successfully sent for test ${testInfo.title}`);
    }
    async sendCoverage(testName, componentCoverageData) {
        logger_1.default.debug(`Initiating coverage send for test: ${testName}`);
        await this.remoteAgent.sendComponentsTestCoverage(testName, componentCoverageData);
        logger_1.default.debug(`Footprints successfully sent for test ${testName}.`);
    }
    static runServiceMethodSafe(_, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            try {
                if (this.configurationError ||
                    !this.remoteAgent) {
                    logger_1.default.debug(`Skipping method ${propertyKey} due to configuration error or missing remote agent.`);
                    return null;
                }
                return await originalMethod.apply(this, args);
            }
            catch (error) {
                logger_1.default.error(`An error occurred in method ${propertyKey}:`, error);
            }
        };
        return descriptor;
    }
    static InitSealightsConfig(_, propertyKey, descriptor) {
        const originalMethod = descriptor.value;
        descriptor.value = async function (...args) {
            try {
                this.SLConfig.init();
                return await originalMethod.apply(this, args);
            }
            catch (error) {
                this.configurationError = true;
                logger_1.default.error(`Failed to initialize Sealights configuration before executing ${propertyKey}:`, error);
            }
        };
        return descriptor;
    }
}
exports.SealightsTestSessionService = SealightsTestSessionService;
__decorate([
    SealightsTestSessionService.InitSealightsConfig
], SealightsTestSessionService.prototype, "init", null);
__decorate([
    SealightsTestSessionService.runServiceMethodSafe
], SealightsTestSessionService.prototype, "shouldSkipTest", null);
__decorate([
    SealightsTestSessionService.runServiceMethodSafe
], SealightsTestSessionService.prototype, "getTestSessionId", null);
__decorate([
    SealightsTestSessionService.runServiceMethodSafe
], SealightsTestSessionService.prototype, "createTestSession", null);
__decorate([
    SealightsTestSessionService.runServiceMethodSafe
], SealightsTestSessionService.prototype, "endTestSession", null);
__decorate([
    SealightsTestSessionService.runServiceMethodSafe
], SealightsTestSessionService.prototype, "getTestRecommendations", null);
__decorate([
    SealightsTestSessionService.runServiceMethodSafe
], SealightsTestSessionService.prototype, "sendTestEvent", null);
__decorate([
    SealightsTestSessionService.runServiceMethodSafe
], SealightsTestSessionService.prototype, "sendCoverage", null);
//# sourceMappingURL=service.js.map