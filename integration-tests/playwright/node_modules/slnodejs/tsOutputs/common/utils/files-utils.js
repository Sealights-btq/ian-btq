"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesUtils = void 0;
const path = require("path");
const fs = require("fs");
class FilesUtils {
    static resolveOriginalFullFileName(fullPath, originalFilename) {
        if (path.isAbsolute(originalFilename)) {
            return originalFilename;
        }
        const generatedDir = path.dirname(fullPath);
        originalFilename = path.resolve(generatedDir, originalFilename);
        return originalFilename;
    }
    fixPathAndSpecialChar(path) {
        if (path) {
            if (path[0] === '/' || path[0] === '\\') {
                return path.substr(1).split('\\').join('/');
            }
            return path.split('\\').join('/');
        }
        return path;
    }
    static adjustPathSlashes(filePath) {
        filePath = (filePath || '').replace(/\\/g, '/');
        return filePath;
    }
    static findFileUp(file, folder) {
        const parsed = path.parse(folder);
        const filePath = path.join(folder, file);
        if (fs.existsSync(filePath)) {
            return filePath;
        }
        if (path.resolve(folder) === parsed.root || folder === '.') {
            return null;
        }
        let parentFolder = path.join(folder, '..');
        parentFolder = path.normalize(parentFolder);
        return FilesUtils.findFileUp(file, parentFolder);
    }
    static ensureTrailingSlash(url) {
        return url.endsWith('/') ? url : url + '/';
    }
}
exports.FilesUtils = FilesUtils;
_a = FilesUtils;
FilesUtils.determineSeparator = (paths) => {
    for (const path of paths) {
        const match = /(\/|\\)/.exec(path);
        if (match !== null)
            return match[0];
    }
    return path.sep;
};
// Taken as is an re-written to TypeScript from npm module common-path-prefix
FilesUtils.commonPathPrefix = (paths, sep = _a.determineSeparator(paths)) => {
    const [first = '', ...remaining] = paths;
    if (first === '' || remaining.length === 0)
        return '';
    const parts = first.split(sep);
    let endOfPrefix = parts.length;
    for (const path of remaining) {
        const compare = path.split(sep);
        for (let i = 0; i < endOfPrefix; i++) {
            if (compare[i] !== parts[i]) {
                endOfPrefix = i;
            }
        }
        if (endOfPrefix === 0)
            return '';
    }
    const prefix = parts.slice(0, endOfPrefix).join(sep);
    return prefix.endsWith(sep) ? prefix : prefix + sep;
};
//# sourceMappingURL=files-utils.js.map