"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.processFile = processFile;
exports.processDirectory = processDirectory;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
function processFile(filePath) {
    const content = fs.readFileSync(filePath, 'utf8');
    let updatedContent = content;
    const requireRegex = /const\s*\{\s*([^}]+)\s*\}\s*=\s*require\(["']@playwright\/test["']\);/g;
    updatedContent = updatedContent.replace(requireRegex, (match, destructured) => {
        const quotes = match.includes('"') ? '"' : "'";
        const imports = destructured.split(',').map((imp) => imp.trim());
        const nonTestImports = imports.filter((imp) => !imp.startsWith('test'));
        const testImport = imports.find((imp) => imp.startsWith('test'));
        let newRequire = '';
        if (nonTestImports.length > 0) {
            newRequire = `const { ${nonTestImports.join(', ')} } = require(${quotes}@playwright/test${quotes});\n`;
        }
        if (testImport) {
            newRequire += `const { ${testImport} } = require(${quotes}sealights-playwright-plugin${quotes});\n`;
        }
        return newRequire.trim();
    });
    const importRegex = /import\s*\{\s*([^}]+)\s*\}\s*from\s*["']@playwright\/test["'];/g;
    updatedContent = updatedContent.replace(importRegex, (match, destructured) => {
        const quotes = match.includes('"') ? '"' : "'";
        const imports = destructured.split(',').map((imp) => imp.trim());
        const nonTestImports = imports.filter((imp) => !imp.startsWith('test'));
        const testImport = imports.find((imp) => imp.startsWith('test'));
        let newImport = '';
        if (nonTestImports.length > 0) {
            newImport = `import { ${nonTestImports.join(', ')} } from ${quotes}@playwright/test${quotes};\n`;
        }
        if (testImport) {
            newImport += `import { ${testImport} } from ${quotes}sealights-playwright-plugin${quotes};\n`;
        }
        return newImport.trim();
    });
    fs.writeFileSync(filePath, updatedContent);
}
function processDirectory(dirPath) {
    const files = fs.readdirSync(dirPath);
    files.forEach((file) => {
        const filePath = path.join(dirPath, file);
        const stat = fs.statSync(filePath);
        if (stat.isDirectory()) {
            processDirectory(filePath);
        }
        else if (filePath.endsWith('.js') || filePath.endsWith('.ts')) {
            processFile(filePath);
        }
    });
}
//# sourceMappingURL=importReplaceUtility.js.map