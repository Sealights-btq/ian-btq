"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const custom_commander_1 = require("./custom-commander");
const config_executor_1 = require("./executors/config-executor");
const pr_config_executor_1 = require("./executors/pr-config-executor");
const build_executor_1 = require("./executors/build-executor");
const mocha_executor_1 = require("./executors/mocha-executor");
const run_executor_1 = require("./executors/run-executor");
const start_execution_executor_1 = require("./executors/start-execution-executor");
const end_execution_executor_1 = require("./executors/end-execution-executor");
const upload_report_executor_1 = require("./executors/upload-report-executor");
const nyc_report_executor_1 = require("./executors/nyc-report-executor");
const integration_build_update_components_executor_1 = require("./executors/integration-build-update-components-executor");
const integration_build_delete_components_executor_1 = require("./executors/integration-build-delete-components-executor");
const build_end_executor_1 = require("./executors/build-end-executor");
const dry_run_executor_1 = require("./executors/dry-run/dry-run-executor");
const constants_1 = require("./constants/constants");
const logger_1 = require("../common/logger");
const contracts_1 = require("./contracts");
const instrument_executor_1 = require("./executors/instrument-executor");
const common_1 = require("../common");
const logger = logger_1.LoggerFactory.getCreateApplicationLogger();
const options = {
    'token': 'Token (mandatory if tokenfile is not provided). case-sensitive.',
    'tokenfile': 'Token File (mandatory if token is not provided). case-sensitive. default: sltoken.txt',
    'appname': 'Application name. case-sensitive.',
    'branch': 'Branch name. case-sensitive.',
    'build': 'Build id. Should be unique between builds. case-sensitive',
    'buildsessionid': 'Build Session Id (mandatory if buildsessionidfile is not provided). case-sensitive.',
    'buildsessionidfile': 'Build Session Id File (mandatory if buildsessionid is not provided). case-sensitive.',
    'proxy': 'Proxy server (optional, must be a valid URL. in the form of \'http://127.0.0.1:3333\').',
    'failbuild': 'Fail Build, Flag indicating whether or not to exit with status code 1 if command fails. Default is false',
    'usebranchcoverage': 'Branch Coverage, Flag indicating whether or not to collect branch cover coverage. Default is false',
    'workspacepath': 'Path to the workspace where the source code exists',
    'distfolderpath': 'alias to workspacepath',
    'distpath': 'alias to workspacepath',
    'distributablepath': 'alias to workspacepath',
    'excludedpaths': 'Comma-separated list of excluded paths glob strings, in the form of \'public/**/*.js,files/**/*.js',
    'jobName': 'The CI job name that triggered the build.',
    'logsUrl': 'The logs url of the build.',
    'commit': 'Commit ID, as provided by the SCM',
    'scm': 'The Source Control Management used (currently only \'git\' is supported)',
    'dependency': 'Project dependencies. Pattern should be a semicolon-separated AppName@Branch@Build list.',
    'dependenciesFile': 'A path to a json file that is in the following format: [{"appname":"","branch":"","build":"","buildSessionId":""},{...}]. Every entry may include appName+branch+build OR buildSessionID',
    'teststage': 'The tests stage (e.g \'integration tests\', \'regression\'). The default will be \'Unit Tests\'',
    'labid': 'Lab Id. case-sensitive.',
    'testgroupid': 'Test-group Id. case-sensitive.',
    'useinitialcolor': 'Run in generic mode for unsupported test frameworks. Default is false',
    'reportFile': 'Report files. This argument can be declared multiple times in order to upload multiple files.',
    'reportFilesFolder': 'Folders that contains nothing but report files. All files in folder will be uploaded. ' +
        'This argument can be declared multiple times in order to upload multiple files from multiple folders.',
    'hasMoreRequests': 'Flag indicating whether or not to stop execution after upload. Default is true',
    'type': 'Type of test report. Default is JUnitReport',
    'source': 'Source of test framework. Default is Mocha',
    'report': 'Path to the relevant Sealights formatted json report.',
    'httpServerColoring': 'Enable coloring for the server, meaning that the server can be colored by incoming requests and return the color on its responses',
    'httpClientColoring': 'Enable coloring for the client, meaning that the client can be colored by responses from the server and send colors for outgoing requests',
    'useslnode2': '(Deprecated) this option isn\'t supported.',
    'uniqueModuleId': 'Unique module id, case-sensitive. This value should remain consistent between runs.',
    'es6Modules': 'Use ES6 \'module\' mode when scanning files.',
    'useBabylon': 'Use babylon for scanning files',
    'instrumentationOnly': 'When provided with \'instrumentForBrowsers\', prevents a new build from being reported to Sealights.',
    'instrumentForBrowsers': 'Use this in order to instrument the javascript for working with the browser test listener.',
    'sendContributors': 'Send contributor details for advanced committer reports and features',
    'delayShutdownInSeconds': 'Shutdown time in seconds for the browser agent. Default is 30 seconds.',
    'shouldSetEnv': 'Should override NODE_ENV value. ',
    'nodeEnvValue': 'Values used when override NODE_ENV value, separated by comma',
    'skipUpgrade': 'Should not try to upgrade agent',
    'scmProvider': 'The provider name of your Source Control Management (SCM) tool. Supported values are \'Github\', \'Bitbucket\' and \'Gitlab\'. If not used, \'Github\' is assumed.',
    'scmVersion': 'The version of your Source Control Management (SCM) tool. If left blank, cloud version is assumed. Otherwise, specify the version of your on-premise server.',
    'scmBaseUrl': 'The URL to the repository which contains the code. If left blank, the url of the remote GIT origin is being used.',
    'babylonPlugins': 'List of non default babylon parser plugins, separated by comma. (list of plugins: https://github.com/babel/babel/tree/master/packages/babylon#plugins)',
    'nycReport': 'Path to the relevant nyc json report. This command needs an open execution to work. Passing a test-stage using the --teststage will automatically open an execution.',
    'projectRoot': 'Determine the root directory of project, default is current working directory',
    'repositoryUrl': 'Repository url of the target branch',
    'pullRequestNumber': 'Pull request number',
    'latestCommit': 'Head SHA of the pull request source',
    'targetBranch': 'Target branch of the pull request',
    'userDefinedBuildSessionId': 'Provide build session id manually',
    'enforceFullRun': 'Overrides test selection configuration (deprecated, please use tiaDisabled instead).',
    'componentIds': 'a list of comma-separated components bsids',
    'ok': 'build finished successfully',
    'failed': 'build finished not successfully',
    'folderDepth': 'Folder depth for printing unique ids in dry run command, default is 3',
    'hasNycReport': 'Should parse nyc coverage report, default is false',
    'verbose': 'Show verbose output',
    'useModulePrefix': 'Add uniqueModuleId as prefix (if exists) to uniqueId and files path',
    'collectorUrl': 'The url to Sealights collector will be used to collect footprints from browser environment',
    'enableOpenTelemetry': 'Enable open-telemetry instrumentation when working with the browser test listener. Defaults to false.',
    'allowCORS': 'Comma separated origins (* to enable propagation everywhere) to which headers should be propagated on each outgoing Fetch/XHR call. Defaults to current origin only, enableOpenTelemetry must be true for this option.',
    'resolveWithoutHash': 'resolveWithoutHash. Default is true.',
    'sourceHash': 'Enable generation of method hash from source files instead of generated code.',
    'outputpath': 'outputpath',
    'footprintsMapping': 'Determine where browser footprint will be resolved against sl-mapping, options are: \'agent\', \'server\'. Default is \'agent\'.',
    'excludeSourceMapFiles': `Define how source maps will be processed. 'skipCopy' source maps will be copied to 'output' during the instrumentation. 'skipAndDelete' source files also will be deleted from 'workspace' also. 'none' - source maps will be copied as is. By default - 'skipCopy'. When not provider - 'none'.`,
    'es6Classes': 'Use adjustments for esClasses and update uniqueIds during the scan. Use it when you scan ts classes that later transpiled to es6 classes.',
    'enrichPrivateMethods': 'Use adjustments for esClasses during the scan. Use it when you need to enrich methods with accessibility modifier.',
    'hashIncludeNestedMethods': 'Nested anonymous methods will have impact on method hash calculation. First activation of that flag can cause false-positive code modifications',
    'excludeNestedMethods': 'Nested methods will be excluded from build mapping. First activation of that flag can cause false-positive code modifications',
    'awsConfigure': 'Creates sl-config file in each sub-directory of the workspace path. The file will contain the necessary Sealights configuration for the Node Lambda layer.',
    'awsConfigKeysToIgnore': 'Comma separated list of keys to ignore in the AWS configuration file. Supported values are: \'token\', \'buildSessionId\', \'collectorUrl\', \'projectRoot\', \'labId\', \'commonSrcPrefix\', \'slMapping\', \'proxy\', \'rawCoverage\'.',
    'rawCoverage': 'Generates and send to server metadata that allow to process coverage from v8 lightweight agent later.',
    'tiaDisabled': 'Disregard TIA recommendations and run all tests',
    'enrichByLinesMatch': 'Enable experimental algorithm of method matching',
    'beControlledVersions': 'Update the version according to the BE defined version (default: false)',
    'newInstrumenter': 'Use sl-istanbul-lib-instrument instead of istanbul-lib-instrument',
    'libraries': 'A list of node modules which should be included in the coverage (CSV format, for example: --libraries=@socket.io,agent-base,chokidar)',
    'partialBuildMapping': 'When greater then 0 - build map will be splitted into chunks with defined number of files',
    'scanDotFolders': 'When true scan and dryRun commands take into account libraries starting with a dot.',
    'overrideServer': 'Override server url for the agent to connect to. Sample usage: Using the Collector as a proxy.',
    'excludeTokenFromBrowserConfig': 'Exclude the browser agent token from the browser configuration file.',
    'omitFootprintsLeadingSlash': 'Exclude starting slash in footprints path if present',
    'compressSlMapping': 'Compress sl-mapping file to reduce the size of the file uploaded to the server',
    'reduceFileSize': 'Optimize instrumented file size',
    'ctxPropagationOnly': 'Enable only context propagation without performing any additional browser agent instrumentation',
    'enableLineCoverage': 'Enable line level mapping for coverage in this build',
    'splitPreambleIntoFile': 'Move the instrumentation config to a separate file, this requires the file to be available through the CDN.',
    'useRelativeSlMapping': 'Key in sl-mapping will be relative to worspacepath, make sure to use when scanning an application which will be statically instruemented afterwards.',
    'embedCorrectUniqueId': 'Embeds the uniqueId mapping in the instrumented files',
    'preambleFileName': 'Used together with splitPreambleIntoFile to define a custom name (default: sl-preamble-config.js)',
    'preambleFileUrl': `Used together with preambleFileName to define a custom url (default: "" which equals to root, 
            you can pass like https://example.com/a/b/c or relative like a/b/c).
            ** Important: Only use this if you need a different server than the one used for the instrumented files,
            ** Important: actual url will be {preambleFileUrl}/{preambleFileName}`,
    'autoResolveProjectRoot': 'Turns on auto resolve project root, when this feature is enabled additional data will be appended to the end of the scanned code, which will be used to resolve the project root when running with a test listener',
    'skipInstrumentingFilesWithoutSourceMap': 'Skip instrumenting files without source map, default is false',
    'toggleBasedBrowserInstrumentation': 'Once enabled the browser agent will create separate instrumented files and keep the original files intact. If the preamble file is not found, the original files will be loaded in the browser.',
    'allowedDomains': 'Comma-separated list of domains. If provided, the agent in instrumented will be loaded only on domains specified in the list. If empty string is passed, this option is disabled and agent is loaded for all domains (can be used to overwrite env var or remote config). In scan and dryRun commands --instrumentForBrowsers must be used for this to take effect.',
    'recognizeBabelCreateClass': "Enables refined recognition for babel's _createClass calls, even with code minification",
    'preferSourceMapFromFile': 'When true, source maps from files take precedence before inline source maps',
    'enrichByMethodRange': 'When true, methods are matched based on the end positions being inside the original method range during enrichment. Implicitly sets recognizeBabelCreateClass on.',
    'testProjectId': 'Test project ID differentiates between different test stages with the same test stage name of different teams/products/etc.',
    'targetTestProjectId': 'Test project ID to set for PR builds. The target test-project-id will be used to the statistical-model used for recommendations.',
};
const customCommander = new custom_commander_1.CustomCommander();
const program = customCommander.getCommander();
program
    .command(contracts_1.COMMANDS.CONFIG)
    .description('Create a buildSessionId')
    .option('--tokenfile <tokenfile>', options.tokenfile, 'sltoken.txt')
    .option('--token <token>', options.token)
    .requiredOption('--appname <appname>', options.appname)
    .requiredOption('--branch <branch>', options.branch)
    .requiredOption('--build <build>', options.build)
    .option('--buildsessionid <buildsessionid>', options.userDefinedBuildSessionId)
    .option('--buildsessionidfile <buildsessionidfile>', options.buildsessionidfile)
    .option('--proxy <proxy>', options.proxy)
    .option('--overrideServer <overrideServer>', options.overrideServer)
    .option('--failbuild <failbuild>', options.failbuild, false)
    .option('--skipUpgrade', options.skipUpgrade, booleanOption, false)
    .option('--beControlledVersions', options.beControlledVersions, booleanOption, false)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new config_executor_1.ConfigExecutor().execute(cmd);
    });
});
program
    .command(contracts_1.COMMANDS.PR_CONFIG)
    .description('Create a buildSessionId for pull request integration')
    .option('--tokenfile <tokenfile>', options.tokenfile, 'sltoken.txt')
    .option('--token <token>', options.token)
    .requiredOption('--appname <appname>', options.appname)
    .requiredOption('--targetBranch <targetBranch>', options.targetBranch)
    .requiredOption('--latestCommit <latestCommit>', options.latestCommit)
    .requiredOption('--pullRequestNumber <pullRequestNumber>', options.pullRequestNumber)
    .requiredOption('--repositoryUrl <repositoryUrl>', options.repositoryUrl)
    .option('--branch <branch>', options.branch)
    .option('--build <build>', options.build)
    .option('--proxy <proxy>', options.proxy)
    .option('--overrideServer <overrideServer>', options.overrideServer)
    .option('--buildsessionidfile <buildsessionidfile>', options.buildsessionidfile)
    .option('--failbuild <failbuild>', options.failbuild, false)
    .option('--skipUpgrade', options.skipUpgrade, booleanOption, false)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new pr_config_executor_1.PRConfigExecutor().execute(cmd);
    });
});
createCommand(contracts_1.COMMANDS.INSTRUMENT, false, true)
    .description('Instrument the javascript for working with the browser test listener.')
    .option('-w, --workspacePath <path>', options.workspacepath)
    .option('--distfolderpath <workspacepath>', options.distfolderpath)
    .option('--distpath <workspacepath>', options.distpath)
    .option('--distributablepath <workspacepath>', options.distributablepath)
    .option('--es6Modules', options.es6Modules)
    .option('--ctxPropagationOnly', options.ctxPropagationOnly, false)
    .option('--delayShutdownInSeconds <n>', options.delayShutdownInSeconds, parseInt)
    .option('-o, --outputPath <path>', options.outputpath)
    .option('--babylonPlugins <plugins>', options.babylonPlugins, csvToArray)
    .option('-p, --projectRoot <path>', options.projectRoot)
    .option('--labid <id>', options.labid)
    .option('--collectorUrl <url>', options.collectorUrl)
    .option('--footprintsMapping <type>', options.footprintsMapping, common_1.FootprintsMapping.AGENT)
    .option('--enableOpenTelemetry', options.enableOpenTelemetry)
    .option('--no-reduceFileSize', options.reduceFileSize)
    .option('--allowCORS', options.allowCORS)
    .option('--excludeTokenFromBrowserConfig', options.excludeTokenFromBrowserConfig)
    .option('--splitPreambleIntoFile', options.splitPreambleIntoFile, false)
    .option('--preambleFileName <preambleFileName>', options.preambleFileName)
    .option('--preambleFileUrl <preambleFileUrl>', options.preambleFileUrl)
    .option('--toggleBasedBrowserInstrumentation', options.toggleBasedBrowserInstrumentation, false)
    .option('--allowedDomains <allowedDomains>', options.allowedDomains)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new instrument_executor_1.InstrumentExecutor()
            .execute(cmd);
    });
});
function createBuildOptions({ command, description }) {
    return createCommand(command, true, true)
        .description(description)
        .option('--workspacepath <workspacepath>', options.workspacepath)
        .option('--distfolderpath <workspacepath>', options.distfolderpath)
        .option('--distpath <workspacepath>', options.distpath)
        .option('--distributablepath <workspacepath>', options.distributablepath)
        .option('--scm <scm>', options.scm)
        .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
        .option('--excludedpaths <excludedpaths>', options.excludedpaths)
        .option('--jobName <jobName>', options.jobName)
        .option('--logsUrl <logsUrl>', options.logsUrl)
        .option('--commit  <commit>', options.commit)
        .option('--dependency <dependency>', options.dependency, csvToArray)
        .option('-d, --dependenciesFile <dependenciesFile>', options.dependenciesFile)
        .option('--recursive', 'recursive', true)
        .option('--instrumentForBrowsers', options.instrumentForBrowsers, false)
        .option('--ctxPropagationOnly', options.ctxPropagationOnly, false)
        .option('--es6Modules', options.es6Modules, false)
        .option('--useBabylon [useBabylon]', options.useBabylon, booleanOption, true)
        .option('--sendContributors [sendContributors]', options.sendContributors, booleanOption, true)
        .option('--delayShutdownInSeconds <n>', options.delayShutdownInSeconds, parseInt)
        .option('--instrumentationOnly', options.instrumentationOnly, false)
        .option('--resolveWithoutHash [resolveWithoutHash]', options.resolveWithoutHash, booleanOption, true) // not in use hardcoded to `true` during instrumnetation
        .option('--sourceHash', options.sourceHash)
        .option('--outputpath <outputpath>', options.outputpath)
        .option('--uniqueModuleId <uniqueModuleId>', options.uniqueModuleId)
        .option('--scmProvider <scmProvider>', options.scmProvider)
        .option('--scmBaseUrl <scmBaseUrl>', options.scmBaseUrl)
        .option('--scmVersion <scmVersion>', options.scmVersion)
        .option('--babylonPlugins <babylonPlugins>', options.babylonPlugins, csvToArray)
        .option('--projectRoot <projectRoot>', options.projectRoot)
        .option('--labid <labid>', options.labid)
        .option('--useModulePrefix', options.useModulePrefix, false)
        .option('--collectorUrl <collectorUrl>', options.collectorUrl)
        .option('--footprintsMapping <footprintsMapping>', options.footprintsMapping, 'agent')
        .option('--enableOpenTelemetry', options.enableOpenTelemetry, false)
        .option('--allowCORS <allowCORS>', options.allowCORS)
        .option('--excludeSourceMapFiles [mode]', options.excludeSourceMapFiles)
        .option('--es6Classes [es6Classes]', options.es6Classes)
        .option('--enrichPrivateMethods [enrichPrivateMethods]', options.enrichPrivateMethods)
        .option('--hashIncludeNestedMethods [hashIncludeNestedMethods]', options.hashIncludeNestedMethods)
        .option('--excludeNestedMethods [excludeNestedMethods]', options.excludeNestedMethods)
        .option('--awsConfigure', options.awsConfigure, false)
        .option('--awsConfigKeysToIgnore [keys]', options.awsConfigKeysToIgnore, false)
        .option('--rawCoverage [rawCoverage]', options.rawCoverage, false)
        .option('-l, --enrichByLinesMatch', options.enrichByLinesMatch, false)
        // TODO - remove after new instrumenter has enough usage.
        .option('--newInstrumenter', options.newInstrumenter, false)
        .option('--partialBuildMapping  <size>', options.partialBuildMapping)
        .option('--scanDotFolders', options.scanDotFolders, booleanOption, false)
        .option('--excludeTokenFromBrowserConfig', options.excludeTokenFromBrowserConfig, false)
        .option('--compressSlMapping', options.compressSlMapping, false)
        .option('--enableLineCoverage', options.enableLineCoverage, false)
        .option('--splitPreambleIntoFile', options.splitPreambleIntoFile, false)
        .option('--useRelativeSlMapping', options.useRelativeSlMapping, false)
        .option('--embedCorrectUniqueId', options.embedCorrectUniqueId, false)
        .option('--preambleFileName <preambleFileName>', options.preambleFileName)
        .option('--preambleFileUrl <preambleFileUrl>', options.preambleFileUrl)
        .option('--autoResolveProjectRoot', options.autoResolveProjectRoot, false)
        .option('--skipInstrumentingFilesWithoutSourceMap', options.skipInstrumentingFilesWithoutSourceMap, false)
        .option('--toggleBasedBrowserInstrumentation', options.toggleBasedBrowserInstrumentation, false)
        .option('--allowedDomains <allowedDomains>', options.allowedDomains)
        .option('--recognizeBabelCreateClass', options.recognizeBabelCreateClass, false)
        .option('--preferSourceMapFromFile', options.preferSourceMapFromFile, false)
        .option('--enrichByMethodRange', options.enrichByMethodRange, false)
        .action(function (cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            setWorkspacepath(cmd);
            yield new build_executor_1.BuildExecutor()
                .setAliasCommand(command)
                .execute(cmd);
        });
    });
}
function createBuildEndOptions({ command, description }) {
    return createCommand(command, false, true)
        .description(description)
        .option('--ok', options.ok)
        .option('--failed', options.failed)
        .action(function (cmd) {
        return __awaiter(this, void 0, void 0, function* () {
            yield new build_end_executor_1.BuildEndExecutor()
                .setAliasCommand(command)
                .execute(cmd);
        });
    });
}
createBuildEndOptions({
    command: contracts_1.COMMANDS.BUILD_END,
    description: `Notify sealighs for end of build and status. Deprecated, use 'scanned' instead.`
});
createBuildEndOptions({
    command: contracts_1.COMMANDS.SCANNED,
    description: `Notify sealighs for end of build and status`
});
createBuildOptions({
    command: contracts_1.COMMANDS.SCAN,
    description: 'Run Build Scanner'
});
createBuildOptions({
    command: contracts_1.COMMANDS.BUILD,
    description: `Run Build Scanner. Deprecated, use 'scan' instead.`
});
createCommand(`${contracts_1.COMMANDS.MOCHA} [args...]`)
    .description('Run Unit Tests with Mocha')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    // command specific options
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--labid <labid>', options.labid, undefined)
    .option('--testgroupid <testgroupid>', options.testgroupid, undefined)
    .option('--useslnode2 [useslnode2]', options.useslnode2, booleanOption, true)
    .option('--httpServerColoring', options.httpServerColoring, false)
    .option('--httpClientColoring', options.httpClientColoring, false)
    .option('--resolveWithoutHash [resolveWithoutHash]', options.resolveWithoutHash, booleanOption, true)
    .option('--projectRoot <projectRoot>', options.projectRoot)
    .option('--enforceFullRun', options.enforceFullRun, false)
    .option('--tiaDisabled', options.tiaDisabled, booleanOption, false)
    .option('--testProjectId <testProjectId>', options.testProjectId, undefined)
    .option('--targetTestProjectId <targetTestProjectId>', options.targetTestProjectId, undefined)
    .action(function (args, cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new mocha_executor_1.MochaExecutor().execute(cmd, args);
    });
});
createCommand(`${contracts_1.COMMANDS.JASMINE} [args...]`)
    .description('Run tests with jasmine-node')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    // command specific options
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--labid <labid>', options.labid, undefined)
    // general options
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.JASMINE);
});
createCommand(`${contracts_1.COMMANDS.MOCHA_PHANTOM_JS} [args...]`)
    .description('Create \'sl-hooks.js\' for integration with mocha-phantomjs')
    // command specific options
    .option('--labid <labid>', options.labid, undefined)
    .option('--resolveWithoutHash [resolveWithoutHash]', options.resolveWithoutHash, booleanOption, true)
    // general options
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.MOCHA_PHANTOM_JS);
});
createCommand(`${contracts_1.COMMANDS.RUN} [args...]`, true, true)
    .description('Run Program with Agent')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    // command specific options
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--proxy <proxy>', options.proxy)
    .option('--overrideServer <overrideServer>', options.overrideServer)
    .option('--useinitialcolor <useinitialcolor>', options.useinitialcolor, false)
    .option('--workspacepath <workspacepath>', options.workspacepath, '.')
    .option('--distfolderpath <workspacepath>', options.distfolderpath, '.')
    .option('--distpath <workspacepath>', options.distpath, '.')
    .option('--distributablepath <workspacepath>', options.distributablepath, '.')
    .option('--labid <labid>', options.labid, undefined)
    .option('--useslnode2 [useslnode2]', options.useslnode2, booleanOption, true)
    .option('--httpServerColoring', options.httpServerColoring, false)
    .option('--httpClientColoring', options.httpClientColoring, false)
    .option('--collectorUrl <collectorUrl>', options.collectorUrl)
    .option('--projectRoot <projectRoot>', options.projectRoot)
    .option('--libraries <libraries>', options.libraries)
    .option('--omitFootprintsLeadingSlash', options.omitFootprintsLeadingSlash, false)
    // general options
    .action(function (args, cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        setWorkspacepath(cmd);
        yield new run_executor_1.RunExecutor().execute(cmd, args);
    });
});
/**
 * Start Execution for the Generic Agent
 */
createCommand(contracts_1.COMMANDS.START)
    .description('Start Execution')
    .option('--teststage <teststage>', options.teststage, 'Unit Tests')
    .option('--labid <labid>', options.labid, undefined)
    .option('--testgroupid <testgroupid>', options.testgroupid)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new start_execution_executor_1.StartExecutionExecutor().execute(cmd);
    });
});
/**
 * End Execution for the Generic Agent
 */
createCommand(contracts_1.COMMANDS.END)
    .description('End Execution')
    .option('--labid <labid>', options.labid, undefined)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new end_execution_executor_1.EndExecutionExecutor().execute(cmd);
    });
});
/**
 * Upload Junit Reports for the Generic Agent
 */
createCommand(contracts_1.COMMANDS.UPLOAD_REPORTS, true, true)
    .description('Upload Reports')
    .option('--labid <labid>', options.labid, undefined)
    .option('--reportFile <reportFile>', options.reportFile, csvToArray, [])
    .option('--reportFilesFolder <reportFilesFolder>', options.reportFilesFolder, csvToArray, [])
    .option('--type <type>', options.type, 'JUnitReport')
    .option('--source <source>', options.source, 'Mocha')
    .option('--hasMoreRequests [hasMoreRequests]', options.hasMoreRequests, booleanOption, true)
    .option('--teststage <teststage>', options.teststage)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        let startedExecution = false;
        if (cmd.teststage !== undefined) {
            try {
                yield new start_execution_executor_1.StartExecutionExecutor().execute(cmd, undefined, true);
                startedExecution = true;
            }
            catch (e) {
                logger.warn(`Issue preventing the agent from starting an execution for ${cmd.teststage}`, e);
            }
        }
        try {
            yield new upload_report_executor_1.UploadReportExecutor().execute(cmd, undefined, startedExecution);
        }
        catch (e) {
            logger.error('Command failed due to error', e);
        }
        if (startedExecution) {
            try {
                yield new end_execution_executor_1.EndExecutionExecutor().execute(cmd);
            }
            catch (e) {
                logger.warn(`Issue preventing the agent from ending the execution for ${cmd.teststage}`, e);
            }
        }
    });
});
createCommand(contracts_1.COMMANDS.EXTERNAL_REPORT)
    .description('Upload External Report')
    .option('--report <report>', options.report)
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.EXTERNAL_REPORT);
});
createCommand(contracts_1.COMMANDS.NYC_REPORT, true, true)
    .description('Upload nyc report')
    .option('--labid <labid>', options.labid, undefined)
    .option('--report <report>', options.nycReport, nyc_report_executor_1.NycReportExecutor.DEFAULT_NYC_REPORT_FILE_LOC)
    .option('--projectRoot <projectRoot>', options.projectRoot)
    .option('--teststage <teststage>', options.teststage)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        let startedExecution = false;
        if (cmd.teststage !== undefined) {
            try {
                yield new start_execution_executor_1.StartExecutionExecutor().execute(cmd, undefined, true);
                startedExecution = true;
            }
            catch (e) {
                logger.warn(`Issue preventing the agent from starting an execution for ${cmd.teststage}`, e);
            }
        }
        try {
            yield new nyc_report_executor_1.NycReportExecutor().execute(cmd, undefined, startedExecution);
        }
        catch (e) {
            logger.error('Command failed due to error', e);
        }
        if (startedExecution) {
            try {
                yield new end_execution_executor_1.EndExecutionExecutor().execute(cmd);
            }
            catch (e) {
                logger.warn(`Issue preventing the agent from ending the execution for ${cmd.teststage}`, e);
            }
        }
    });
});
createCommand(contracts_1.COMMANDS.COMPONENT_UPDATE)
    .description('Add/update components to an integration build')
    .option('--componentIds <componentIds>', options.componentIds, csvToArray)
    .option('--componentFile <componentFile>', options.dependenciesFile)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new integration_build_update_components_executor_1.IntegrationBuildUpdateComponentsExecutor().execute(cmd);
    });
});
createCommand(contracts_1.COMMANDS.COMPONENT_DELETE)
    .description('Delete components to an integration build')
    .option('--componentIds <componentIds>', options.componentIds, csvToArray)
    .option('--componentFile <componentFile>', options.dependenciesFile)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new integration_build_delete_components_executor_1.IntegrationBuildDeleteComponentsExecutor().execute(cmd);
    });
});
program
    .command(contracts_1.COMMANDS.INSTALL_BABEL)
    .description('Set babel config to support sealights')
    .option('--nodeEnvValue <nodeEnvValue>', options.nodeEnvValue, csvToArray)
    // general options
    .option('--skipUpgrade', options.skipUpgrade, booleanOption, false)
    .action(function () {
    notifyDeprecatedCommand(contracts_1.COMMANDS.INSTALL_BABEL);
});
program
    .command(contracts_1.COMMANDS.DRY_RUN)
    .description('Dry run mode for the node agent')
    .allowUnknownOption()
    .option('--workspacepath <workspacepath>', options.workspacepath)
    .option('--distfolderpath <workspacepath>', options.distfolderpath)
    .option('--distpath <workspacepath>', options.distpath)
    .option('--distributablepath <workspacepath>', options.distributablepath)
    .option('--scm <scm>', options.scm, 'none')
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    .option('--excludedpaths <excludedpaths>', options.excludedpaths)
    .option('--instrumentForBrowsers', options.instrumentForBrowsers, false)
    .option('--ctxPropagationOnly', options.ctxPropagationOnly, false)
    .option('--es6Modules', options.es6Modules, false)
    .option('--babylonPlugins <babylonPlugins>', options.babylonPlugins, csvToArray)
    .option('--buildScanProjectRoot <buildScanProjectRoot>', `${options.projectRoot} applied for build scanner`)
    .option('--nycProjectRoot <nycProjectRoot>', `${options.projectRoot} applied for nycReport`)
    .option('--instrumentationOnly', options.instrumentationOnly, false)
    .option('--outputpath <outputpath>', options.outputpath)
    .option('--folderDepth <folderDepth>', options.folderDepth, constants_1.DEFAULT_FOLDER_DEPTH)
    .option('--usebranchcoverage [usebranchcoverage]', options.usebranchcoverage, booleanOption, false)
    .option('--verbose', options.verbose, false)
    .option('--hasNycReport', options.hasNycReport, false)
    .option('--report <report>', options.nycReport, nyc_report_executor_1.NycReportExecutor.DEFAULT_NYC_REPORT_FILE_LOC)
    .option('--sourceHash', options.sourceHash)
    .option('--excludeSourceMapFiles [mode]', options.excludeSourceMapFiles)
    .option('--es6Classes [es6Classes]', options.es6Classes)
    .option('--enrichPrivateMethods [enrichPrivateMethods]', options.enrichPrivateMethods)
    .option('--hashIncludeNestedMethods [hashIncludeNestedMethods]', options.hashIncludeNestedMethods)
    .option('--excludeNestedMethods [excludeNestedMethods]', options.excludeNestedMethods)
    .option('--rawCoverage [rawCoverage]', options.rawCoverage, false)
    .option('-l, --enrichByLinesMatch [enrichByLinesMatch]', options.enrichByLinesMatch)
    // TODO - remove after new instrumenter has enough usage.
    .option('--newInstrumenter', options.newInstrumenter, false)
    .option('--partialBuildMapping <size>', options.partialBuildMapping)
    .option('--scanDotFolders', options.scanDotFolders, booleanOption, false)
    .option('--enableLineCoverage', options.enableLineCoverage, false)
    .option('--splitPreambleIntoFile', options.splitPreambleIntoFile, false)
    .option('--useRelativeSlMapping', options.useRelativeSlMapping, false)
    .option('--embedCorrectUniqueId', options.embedCorrectUniqueId, false)
    .option('--preambleFileName <preambleFileName>', options.preambleFileName)
    .option('--preambleFileUrl <preambleFileUrl>', options.preambleFileUrl)
    .option('--skipInstrumentingFilesWithoutSourceMap', options.skipInstrumentingFilesWithoutSourceMap, false)
    .option('--toggleBasedBrowserInstrumentation', options.toggleBasedBrowserInstrumentation, false)
    .option('--allowedDomains <allowedDomains>', options.allowedDomains)
    .option('--recognizeBabelCreateClass', options.recognizeBabelCreateClass, false)
    .option('--preferSourceMapFromFile', options.preferSourceMapFromFile, false)
    .option('--enrichByMethodRange', options.enrichByMethodRange, false)
    .action(function (cmd) {
    return __awaiter(this, void 0, void 0, function* () {
        setWorkspacepath(cmd);
        yield new dry_run_executor_1.DryRunExecutor().execute(cmd);
    });
});
(function checkUnknownCommand() {
    var _a, _b;
    try {
        const currentCommand = (_a = program === null || program === void 0 ? void 0 : program.args) === null || _a === void 0 ? void 0 : _a[0];
        const isCommandUnknown = !!(program.commands.filter(v => v._name === currentCommand).length);
        if (isCommandUnknown) {
            logger.lifecycle(`Unknown command ${(_b = program === null || program === void 0 ? void 0 : program.args) === null || _b === void 0 ? void 0 : _b[0]}`);
            process.exit(1);
        }
    }
    catch (e) { }
})();
program.parse(process.argv);
if (!process.argv.slice(2).length) {
    printHelpAndExit();
}
if (!program._actionResults.length) {
    logger.error(`Unknown command: ${process.argv[2]}`);
    printHelpAndExit();
}
function printHelpAndExit() {
    program.outputHelp();
    process.exit(1);
}
function csvToArray(raw) {
    const trimmedValues = [];
    raw.split(',').forEach((val) => {
        if (val)
            trimmedValues.push(val.trim());
    });
    return trimmedValues;
}
function booleanOption(option) {
    return (option && option.toLowerCase() == 'true');
}
function notifyDeprecatedCommand(commandName) {
    logger.lifecycle(`Command ${commandName} is not supported anymore.
    If you still using it please use slnodejs version lower or equals to 3.5.265.
    Or connect Sealights team`);
}
function createCommand(name, addOldParams = true, defaultBuildSessionId = false) {
    const command = program.command(name)
        .option('--tokenfile <tokenfile>', options.tokenfile, 'sltoken.txt')
        .option('--token <token>', options.token)
        .option('--buildsessionid <buildsessionid>', options.buildsessionid)
        .option('--failbuild <failbuild>', options.failbuild, false)
        .option('--proxy <proxy>', options.proxy)
        .option('--overrideServer <overrideServer>', options.overrideServer)
        .option('--skipUpgrade', options.skipUpgrade, booleanOption, false);
    // Unused params
    if (addOldParams) {
        command.option('--appname <appname>', options.appname)
            .option('--branch <branch>', options.branch)
            .option('--build <build>', options.build);
    }
    if (defaultBuildSessionId) {
        command.option('--buildsessionidfile <buildsessionidfile>', options.buildsessionidfile, 'buildSessionId');
    }
    else {
        command.option('--buildsessionidfile <buildsessionidfile>', options.buildsessionidfile);
    }
    return command;
}
function setWorkspacepath(cmd) {
    cmd.workspacepath = cmd.workspacepath || cmd.distfolderpath || cmd.distpath || cmd.distributablepath;
}
//# sourceMappingURL=cli.js.map