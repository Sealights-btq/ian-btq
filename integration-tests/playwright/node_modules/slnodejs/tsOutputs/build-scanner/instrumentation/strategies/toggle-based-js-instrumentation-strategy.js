"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToggleBasedJsInstrumentationStrategy = void 0;
const fs = require("fs");
const path = require("path");
const js_instrumnetation_strategy_1 = require("./js-instrumnetation-strategy");
/**
 * This strategy implements the toggle-based browser instrumentation approach.
 * It creates three files for each JS file:
 * 1. Original file.js - Modified to contain loader logic that checks for sl-preamble-config.js in the root of the web server
 * 2. file_original .js- The original source file without modifications
 * 3. file_instrumented.js - The instrumented version of the file
 */
class ToggleBasedJsInstrumentationStrategy extends js_instrumnetation_strategy_1.JsFileInstrumentationStrategy {
    process(inputFile, outputFile, fileKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const content = this.getContent(inputFile);
            const ext = path.extname(fileKey);
            const dir = path.dirname(fileKey);
            const baseName = path.basename(fileKey, ext);
            // We use this file path to save the original file without Sealights instrumentation
            const originalFileWritePath = path.join(path.dirname(outputFile), `${baseName}_original${ext}`);
            // We use this file path to save the instrumented file with Sealights preamble
            const instrumentedFileWritePath = path.join(path.dirname(outputFile), `${baseName}_instrumented${ext}`);
            // We use this file path to load the original file based on the toggle-based approach
            const originalScriptPath = path.join(dir, `${baseName}_original${ext}`);
            // We use this file path to load the instrumented file based on the toggle-based approach
            const instrumentedScriptPath = path.join(dir, `${baseName}_instrumented${ext}`);
            // Step 1: Save the original file
            fs.writeFileSync(originalFileWritePath, content, "utf8");
            // Step 2: Create instrumented version
            let instrumentedContent = this.instrumenter.instrumentContent(content, fileKey);
            instrumentedContent = this.postInstrumentation(instrumentedContent, fileKey);
            // We save the instrumented file with Sealights preamble
            fs.writeFileSync(instrumentedFileWritePath, instrumentedContent, "utf8");
            // Step 3: Create the loader version (the main file which already existed under that name in the output directory)
            const loaderContent = this.createLoaderContent(instrumentedScriptPath, originalScriptPath);
            fs.writeFileSync(outputFile, loaderContent, "utf8");
        });
    }
    /**
     * Creates the loader content that will dynamically load either the original or instrumented file
     * based on the presence of sl-preamble-config.js
     */
    createLoaderContent(instrumentedScriptPath, originalScriptPath) {
        return `
// Sealights Toggle-Based Instrumentation Loader
(function() {
    const instrumentedScriptPath = '${instrumentedScriptPath}';
    const originalScriptPath = '${originalScriptPath}';
    // Check for the presence of sl-preamble-config.js
    let useInstrumented = false;
    
    try {
        // Try to find sl-preamble-config.js in the root of the web server
        try {
            if (typeof window !== 'undefined') {
                const xhr = new XMLHttpRequest();
                xhr.open('HEAD', '/sl-preamble-config.js', false);  // false makes it synchronous
                xhr.send();
                if (xhr.status === 200) {
                    useInstrumented = true;
                }
            }
        } catch (e) {
            // In case of any errors, default to the original file
            console.error('Sealights: Error checking for sl-preamble-config.js', e);
        }
        
        // Dynamically load the appropriate version
        if (typeof document !== 'undefined') {
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.src = useInstrumented ? instrumentedScriptPath : originalScriptPath;
            document.head.appendChild(script);
        }
    } catch (e) {
        console.error('Sealights: Error in toggle-based loader', e);
        // In case of any error, attempt to load the original file
        if (typeof document !== 'undefined') {
            const script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.src = originalScriptPath;
            document.head.appendChild(script);
        }
    }
})();
`;
    }
}
exports.ToggleBasedJsInstrumentationStrategy = ToggleBasedJsInstrumentationStrategy;
//# sourceMappingURL=toggle-based-js-instrumentation-strategy.js.map