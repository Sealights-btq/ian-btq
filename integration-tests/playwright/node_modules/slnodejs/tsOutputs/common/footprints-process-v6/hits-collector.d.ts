import { IBranchHit, IHitFileData, IIstanbulModule, IIstanbulProcessMetrics } from './contracts';
import { Logger } from '../contracts';
export declare class HitsCollector {
    private enableLineCoverage;
    protected _globalCoverageObject: IIstanbulProcessMetrics;
    protected projectRootUniqueIdMap: {
        [key: string]: string[];
    };
    protected _latestCoverageSnapshot: IIstanbulProcessMetrics;
    protected logger: Logger;
    protected errors: Array<Record<string, unknown>>;
    constructor(logger: Logger, globalCoverageObject?: IIstanbulProcessMetrics, enableLineCoverage?: boolean);
    getHitElements(): Promise<IHitFileData[]>;
    protected extractUniqueIdsFromFileOnce(filename: string): Promise<void>;
    get latestCoverageSnapshot(): IIstanbulProcessMetrics;
    set latestCoverageSnapshot(value: IIstanbulProcessMetrics);
    get globalCoverageObject(): IIstanbulProcessMetrics;
    set globalCoverageObject(value: IIstanbulProcessMetrics);
    setEnableLineCoverage(enableLineCoverage: boolean): void;
    private getHitStatements;
    private getHitMethods;
    dropHits(): void;
    private getHitLeaves;
    protected getHitBranches(currentHits: IIstanbulModule, fileHitSnapshot: IIstanbulModule): IBranchHit[];
    private createEmptyIstanbulModule;
    private getFileCoverageObjects;
    getGlobalCoverageObject(): IIstanbulProcessMetrics;
    static resolveGlobalCoverageObject(): any;
    protected updateCoverageSnapshot(currentCounters: IIstanbulProcessMetrics): void;
    private setBranchHit;
    private setFunctionHit;
    sendErrors(): void;
}
