"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstNodeTypes = exports.AstNodeTypesEnum = void 0;
var AstNodeTypesEnum;
(function (AstNodeTypesEnum) {
    AstNodeTypesEnum["LogicalExpression"] = "LogicalExpression";
    AstNodeTypesEnum["BlockStatement"] = "BlockStatement";
    AstNodeTypesEnum["SwitchStatement"] = "SwitchStatement";
    AstNodeTypesEnum["IfStatement"] = "IfStatement";
    AstNodeTypesEnum["ConditionalExpression"] = "ConditionalExpression";
    AstNodeTypesEnum["StringLiteral"] = "StringLiteral";
    AstNodeTypesEnum["Identifier"] = "Identifier";
    AstNodeTypesEnum["AssignmentPattern"] = "AssignmentPattern";
    AstNodeTypesEnum["DefaultArgument"] = "DefaultArgument";
    AstNodeTypesEnum["FunctionExpression"] = "FunctionExpression";
    AstNodeTypesEnum["FunctionDeclaration"] = "FunctionDeclaration";
    AstNodeTypesEnum["ExportNamedDeclaration"] = "ExportNamedDeclaration";
    AstNodeTypesEnum["ExportDefaultDeclaration"] = "ExportDefaultDeclaration";
    AstNodeTypesEnum["ClassMethod"] = "ClassMethod";
    AstNodeTypesEnum["ArrowFunctionExpression"] = "ArrowFunctionExpression";
    AstNodeTypesEnum["ExpressionStatement"] = "ExpressionStatement";
    AstNodeTypesEnum["VariableDeclaration"] = "VariableDeclaration";
    AstNodeTypesEnum["ForStatement"] = "ForStatement";
    AstNodeTypesEnum["ForInStatement"] = "ForInStatement";
    AstNodeTypesEnum["ForOfStatement"] = "ForOfStatement";
    AstNodeTypesEnum["WhileStatement"] = "WhileStatement";
    AstNodeTypesEnum["DoWhileStatement"] = "DoWhileStatement";
    AstNodeTypesEnum["ReturnStatement"] = "ReturnStatement";
    AstNodeTypesEnum["ThrowStatement"] = "ThrowStatement";
    AstNodeTypesEnum["TryStatement"] = "TryStatement";
    AstNodeTypesEnum["BreakStatement"] = "BreakStatement";
    AstNodeTypesEnum["ContinueStatement"] = "ContinueStatement";
})(AstNodeTypesEnum = exports.AstNodeTypesEnum || (exports.AstNodeTypesEnum = {}));
class AstNodeTypes {
    static isExecutableNode(node) {
        if (!node.type) {
            return false;
        }
        // Check if the node type is one of the predefined executable node types
        if (AstNodeTypes.executableNodeTypes[node.type]) {
            return true;
        }
        // Check if the node is an ArrowFunctionExpression that occupies only a single line
        if (node.type === AstNodeTypesEnum.ArrowFunctionExpression) {
            return node.loc.start.line === node.loc.end.line;
        }
        return false; // If none of the conditions match, it's not executable
    }
    static isMethodNode(node) {
        if (!node && !node.type)
            return false;
        return !!AstNodeTypes.methodNodeTypes[node.type];
    }
    static isBranchNode(node) {
        if (!node && !node.type)
            return false;
        return !!AstNodeTypes.branchNodeTypes[node.type];
    }
}
exports.AstNodeTypes = AstNodeTypes;
AstNodeTypes.branchNodeTypes = {
    'IfStatement': true,
    'SwitchStatement': true,
    'ConditionalExpression': true,
    'LogicalExpression': true
};
//TODO: Can we use 'CallExpression' in order to understend which functions are being called? (Nadav)
//TODO: Do we need to handle:  (Nadav)
// * 'MemberExpression'? 
// * 'ClassPrivateMethod'
// * 'ClassProperty'
// * 'ClassPrivateProperty'
// ObjectMethod is property function like 'get', 'set', 'init'. that uses in babylon. (in espirma its called Property). 
AstNodeTypes.methodNodeTypes = {
    'FunctionDeclaration': true,
    'FunctionExpression': true,
    'ArrowFunctionExpression': true,
    'ObjectMethod': true,
    'ClassMethod': true
};
AstNodeTypes.executableNodeTypes = {
    [AstNodeTypesEnum.ExpressionStatement]: true,
    [AstNodeTypesEnum.VariableDeclaration]: true,
    [AstNodeTypesEnum.IfStatement]: true,
    [AstNodeTypesEnum.ForStatement]: true,
    [AstNodeTypesEnum.ForInStatement]: true,
    [AstNodeTypesEnum.ForOfStatement]: true,
    [AstNodeTypesEnum.WhileStatement]: true,
    [AstNodeTypesEnum.DoWhileStatement]: true,
    [AstNodeTypesEnum.ReturnStatement]: true,
    [AstNodeTypesEnum.ThrowStatement]: true,
    [AstNodeTypesEnum.SwitchStatement]: true,
    [AstNodeTypesEnum.TryStatement]: true,
    [AstNodeTypesEnum.BreakStatement]: true,
    [AstNodeTypesEnum.ContinueStatement]: true,
};
//# sourceMappingURL=ast-node-types.js.map