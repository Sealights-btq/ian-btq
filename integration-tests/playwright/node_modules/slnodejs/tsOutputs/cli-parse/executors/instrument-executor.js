"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstrumentExecutor = void 0;
const base_executor_1 = require("./base-executor");
const cia_1 = require("../../build-scanner/cia");
const common_1 = require("../../common");
const agent_instance_data_1 = require("../agent-instance-data");
const utils_1 = require("../utils");
const instrument_args_dto_1 = require("./instrument-args-dto");
const validation_utils_1 = require("../../common/utils/validation-utils");
const constants_1 = require("../constants/constants");
class InstrumentExecutor extends base_executor_1.BaseExecutor {
    constructor() {
        super(...arguments);
        this.commandName = 'instrument';
    }
    innerExecute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            this.printAgentVersionAndAgentId();
            const mappedArgs = this.mapArgs(args);
            yield this.setConfigFromRemote(mappedArgs);
            const cia = new cia_1.CIA();
            try {
                yield cia.instrument(mappedArgs);
            }
            catch (err) {
                this.logError(err);
                return false;
            }
            return true;
        });
    }
    setConfigFromRemote(mappedArgs) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            mappedArgs.reduceInstrumentedFileSize = mappedArgs.reduceInstrumentedFileSize || !!this.agentRemoteConfig.reduceInstrumentedFileSize;
            mappedArgs.excludeTokenFromBrowserConfig = mappedArgs.excludeTokenFromBrowserConfig || !!this.agentRemoteConfig.excludeTokenFromBrowserConfig;
            mappedArgs.overrideServer = this.agentRemoteConfig.overrideServer || mappedArgs.overrideServer;
            mappedArgs.ctxPropagationOnly = this.agentRemoteConfig.ctxPropagationOnly || !!mappedArgs.ctxPropagationOnly;
            mappedArgs.splitPreambleIntoFile = mappedArgs.splitPreambleIntoFile || !!this.agentRemoteConfig.splitPreambleIntoFile;
            mappedArgs.preambleFileName = mappedArgs.preambleFileName || this.agentRemoteConfig.preambleFileName || constants_1.PREAMBLE_DEFAULT_FILE_NAME;
            mappedArgs.preambleFileUrl = mappedArgs.preambleFileUrl || this.agentRemoteConfig.preambleFileUrl || '';
            mappedArgs.toggleBasedBrowserInstrumentation = mappedArgs.toggleBasedBrowserInstrumentation || !!this.agentRemoteConfig.toggleBasedBrowserInstrumentation;
            mappedArgs.allowedDomains = (_c = (_a = mappedArgs.allowedDomains) !== null && _a !== void 0 ? _a : (_b = this.agentRemoteConfig.allowedDomains) === null || _b === void 0 ? void 0 : _b.split(',')) !== null && _c !== void 0 ? _c : [];
        });
    }
    validateArgs(args) {
        this.resolveAliases(args);
        if (args.allowCORS && !args.enableOpenTelemetry) {
            this.logger.lifecycle(`--enableOpenTelemetry must be specified when using --allowCORS option.`);
            return false;
        }
        if (!args.workspacePath) {
            this.logger.lifecycle('\'workspacepath\' argument is required but was not specified');
            return false;
        }
        if (args.preambleFileUrl && !validation_utils_1.ValidationUtils.validatePath(args.preambleFileUrl)) {
            this.logger.lifecycle(`'preambleFileUrl' argument must be a valid URL either full (https://example.com/a/b/c) or relative (a/b/c)`);
            return false;
        }
        this.resolvePathArgs(args);
        return true;
    }
    notifyAgentStarted(_agentInstanceData, cmd) {
        const _super = Object.create(null, {
            notifyAgentStarted: { get: () => super.notifyAgentStarted }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const buildScannerAgentInstanceData = new common_1.AgentInstanceData(common_1.AgentTypes.BUILD_SCANNER, common_1.AgentTechnologies.NODEJS);
            return _super.notifyAgentStarted.call(this, buildScannerAgentInstanceData, cmd);
        });
    }
    resolvePathArgs(args) {
        if (args.workspacePath) {
            args.workspacePath = (0, utils_1.resolvePath)('workspacepath', args.workspacePath);
        }
    }
    resolveAliases(args) {
        args.workspacePath = args.workspacePath || args.distfolderpath || args.distpath || args.distributablepath;
    }
    /*
       The cia Receives parameters with different name/casing so as part of mapping those need to adjust.
       appName => appname.
       buildName => build.
       branchName => branch.
       customerId => customerid
     */
    mapArgs(args) {
        var _a, _b, _c, _d, _e;
        let splitPreambleIntoFile = false;
        if (args.splitPreambleIntoFile === undefined) {
            splitPreambleIntoFile = common_1.SlEnvVars.CIA.splitPreambleIntoFile();
        }
        else {
            splitPreambleIntoFile = args.splitPreambleIntoFile;
        }
        const preambleFileName = args.preambleFileName || common_1.SlEnvVars.CIA.preambleFileName();
        const preambleFileUrl = args.preambleFileUrl || common_1.SlEnvVars.CIA.preambleFileUrl();
        return Object.assign(Object.assign(Object.assign({}, instrument_args_dto_1.InstrumentationArgsDTO.create(args)), this.baseData), { appName: this.baseData.appName, build: this.baseData.buildName, branch: this.baseData.branchName, agentId: agent_instance_data_1.AgentInstanceDataFactory.getOrCreateAgentInstanceData().agentId, customerId: this.baseData.customerid, labId: this.baseData.labid, esModules: args.es6Modules, outputPath: (_a = args.outputPath) !== null && _a !== void 0 ? _a : args.workspacePath, 
            // TODO: next logic should be refactored later
            excludeTokenFromBrowserConfig: (_b = args.excludeTokenFromBrowserConfig) !== null && _b !== void 0 ? _b : common_1.SlEnvVars.CIA.excludeTokenFromBrowserConfig(), overrideServer: (_c = args.overrideServer) !== null && _c !== void 0 ? _c : common_1.SlEnvVars.CIA.overrideServer(), slMappingPath: common_1.SlEnvVars.CIA.getSlMappingPath(), slMappingUrl: common_1.SlEnvVars.CIA.getSlMappingUrl() || common_1.SlEnvVars.CIA.getSlMappingPath(), reduceInstrumentedFileSize: args.reduceFileSize || common_1.SlEnvVars.CIA.reduceInstrumentedFileSize(), ctxPropagationOnly: args.ctxPropagationOnly || common_1.SlEnvVars.CIA.ctxPropagationOnly(), splitPreambleIntoFile,
            preambleFileName,
            preambleFileUrl, toggleBasedBrowserInstrumentation: args.toggleBasedBrowserInstrumentation || common_1.SlEnvVars.CIA.toggleBasedBrowserInstrumentation(), allowedDomains: (_e = (_d = args.allowedDomains) === null || _d === void 0 ? void 0 : _d.split(',')) !== null && _e !== void 0 ? _e : common_1.SlEnvVars.CIA.allowedDomains() });
    }
}
exports.InstrumentExecutor = InstrumentExecutor;
//# sourceMappingURL=instrument-executor.js.map