"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserSlMapper = exports.NodeV8RawCoverageSlMapper = exports.SlMapper = void 0;
const fs_1 = require("fs");
const path_1 = require("path");
const mkdirp_1 = require("mkdirp");
const sl_mapper_tokenizer_1 = require("../../common/sl-mapper-tokenizer");
const files_container_1 = require("../mappings/files-container");
/**
 * Map between uniqueId in generated file to relevant uniqueId in source file.
 * This object will be added to 'window' object due to instrumentation, in order to resolve uniquId's in browser agent
 * @constructor
 */
class SlMapper {
    constructor(outputPath, backendProxy, buildSessionId, logger, slMapperTokenizer) {
        this.outputPath = outputPath;
        this.backendProxy = backendProxy;
        this.buildSessionId = buildSessionId;
        this.logger = logger;
        this.slMapperTokenizer = slMapperTokenizer;
        this._sourcePathMappings = new Map();
    }
    addFileMapping(sourcePath, targetPath) {
        this._sourcePathMappings.set(sourcePath, targetPath);
    }
    addUniqueIdMapping(_sourceUniqueId, _targetUniqueId) {
        return;
    }
    addEmbeddedMapping(filePath, mapping) {
        return;
    }
    toJSON() {
        const mappings = {};
        this._sourcePathMappings.forEach((value, key) => {
            mappings[key] = value;
        });
        if (this.slMapperTokenizer) {
            return this.slMapperTokenizer.tokenizeSlMapping(mappings);
        }
        return mappings;
    }
    submitMapping(uniqueModuleId) {
        return __awaiter(this, void 0, void 0, function* () {
            const blobId = uniqueModuleId ? `${SlMapper.BLOB_ID}-${uniqueModuleId}` : SlMapper.BLOB_ID;
            return this.backendProxy.submitBlobAsync(this.toJSON(), this.buildSessionId, blobId);
        });
    }
    writeToFile() {
        return;
    }
}
exports.SlMapper = SlMapper;
SlMapper.BLOB_ID = 'sl-mapping';
class NodeV8RawCoverageSlMapper extends SlMapper {
    // Constructor override to remove slMapperTokenizer as an option for this class
    constructor(outputPath, backendProxy, buildSessionId, logger) {
        super(outputPath, backendProxy, buildSessionId, logger, undefined);
    }
    addUniqueIdMapping(sourcePath, targetPath) {
        this._sourcePathMappings.set(sourcePath, targetPath);
    }
    addFileMapping(_sourcePath, _targetPath) {
        // We don't need file mapping for nodeV8 coverage collector
        return;
    }
    submitMapping() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.backendProxy.submitNodeV8CoverageMap(this.buildSessionId, this.toJSON());
            return this.backendProxy.submitRawCoverageMapEnd(this.buildSessionId);
        });
    }
}
exports.NodeV8RawCoverageSlMapper = NodeV8RawCoverageSlMapper;
class BrowserSlMapper extends SlMapper {
    constructor() {
        super(...arguments);
        this.embeddedMapping = {};
    }
    addFileMapping(_sourcePath, _targetPath) {
        // We don't need file mapping for browser agent
        return;
    }
    addUniqueIdMapping(sourcePath, targetPath) {
        this._sourcePathMappings.set(sourcePath, targetPath);
    }
    addEmbeddedMapping(filePath, mapping) {
        this.logger.debug(`Adding embedded mapping for file: ${filePath}`);
        this.embeddedMapping[filePath] = mapping;
    }
    writeToFile() {
        const filePath = (0, path_1.resolve)(this.outputPath);
        const outputFolder = (0, path_1.dirname)(filePath);
        (0, mkdirp_1.sync)(outputFolder);
        const fileContent = this.getFileContent();
        try {
            (0, fs_1.writeFileSync)(filePath, fileContent);
        }
        catch (e) {
            this.logger.error(`Failed to write sl-mapping file Error: ${e}`);
        }
    }
    getEmbeddedFileContent(filePath) {
        const filePaths = (0, files_container_1.iterateSubPathes)(filePath);
        let fileContent = '';
        for (const possibleFilePath of filePaths) {
            if (!this.embeddedMapping[possibleFilePath]) {
                this.logger.debug(`No embedded mapping found for file using key: ${possibleFilePath}`);
                continue;
            }
            this.logger.debug(`Found embedded mapping for file using key: ${possibleFilePath}`);
            const tokenizedMapping = new sl_mapper_tokenizer_1.SlMapperTokenizer().tokenizeSlMapping(this.embeddedMapping[possibleFilePath]);
            fileContent += `\nif(window) {\n` +
                `    window.slMappings = window.slMappings || {};\n` +
                `    window.slMappings['${this.buildSessionId}'] = window.slMappings['${this.buildSessionId}'] || {};\n` +
                `    Object.assign(window.slMappings['${this.buildSessionId}'], ${JSON.stringify(tokenizedMapping)});\n` +
                `}`;
        }
        if (!fileContent.length) {
            this.logger.debug(`No embedded mapping found for file using all possible keys: ${filePath}`);
            return '';
        }
        return fileContent;
    }
    getFileContent() {
        return 'var slMapping =' + JSON.stringify(this.toJSON(), null, '\t') + '\n' +
            '        if(window && (!window.$Sealights || !window.$Sealights.slMapping)){\n' +
            '            window.$Sealights = window.$Sealights  || {};\n' +
            '            window.$Sealights.slMapping = slMapping;\n' +
            '        }';
    }
}
exports.BrowserSlMapper = BrowserSlMapper;
//# sourceMappingURL=sl-mapper.js.map