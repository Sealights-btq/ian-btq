"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpMetricStore = void 0;
const system_date_1 = require("../system-date");
class HttpMetricStore {
    constructor(logger) {
        this.logger = logger;
        this.completedRequests = [];
        this.onGoingRequestsMap = {};
        this.bucketStartTimestamp = (0, system_date_1.getSystemDateValueOf)();
    }
    getMetrics() {
        const timestamp = (0, system_date_1.getSystemDateValueOf)();
        const metrics = [];
        this.completedRequests.forEach(x => {
            const tags = {
                status: x.status.toString(),
                method: x.method,
                endpoint: x.endpoint,
                txId: x.txId,
            };
            metrics.push({
                name: 'http_request.count',
                type: 'increment',
                value: 1,
                timestamp: x.end,
                tags
            });
            metrics.push({
                name: 'http_request.duration',
                type: 'histogram',
                value: x.duration,
                timestamp: x.end,
                tags
            });
        });
        const result = {
            start: this.bucketStartTimestamp,
            end: timestamp,
            metrics,
        };
        return result;
    }
    registerRequestStart(txId, endpoint, method, timestamp = (0, system_date_1.getSystemDateValueOf)()) {
        this.onGoingRequestsMap[txId] = {
            start: timestamp,
            end: null,
            duration: null,
            status: null,
            endpoint,
            method,
            txId,
        };
    }
    registerRequestEnd(txId, timestamp = (0, system_date_1.getSystemDateValueOf)(), status = 200) {
        const requestData = this.onGoingRequestsMap[txId];
        if (!requestData) {
            this.logger.debug(`Request ${txId} was not registered`);
            return null;
        }
        requestData.end = timestamp;
        requestData.duration = requestData.end - requestData.start;
        requestData.status = status;
        this.completedRequests.push(requestData);
        delete this.onGoingRequestsMap[txId];
    }
    registerRequest(txId, endpoint, method, start, end, status = 200) {
        this.completedRequests.push({
            endpoint,
            method,
            start,
            end,
            duration: end - start,
            status,
            txId,
        });
    }
    flush(timestamp = (0, system_date_1.getSystemDateValueOf)()) {
        this.completedRequests = [];
        this.bucketStartTimestamp = timestamp;
    }
}
exports.HttpMetricStore = HttpMetricStore;
//# sourceMappingURL=metrics-store.js.map