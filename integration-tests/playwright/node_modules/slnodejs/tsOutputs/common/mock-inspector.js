"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockInspector = void 0;
const cockpit_notifier_1 = require("./agent-events/cockpit-notifier");
class MockInspector {
    constructor(logger, handler) {
        this.logger = logger;
        this.handler = handler !== null && handler !== void 0 ? handler : this.defaultHandler;
        this.whitelistedNodeModules = new Set([
            'fs',
            'path',
            'http',
            'https',
            'crypto',
            'child_process',
            'events',
            'url',
            'os',
            'buffer',
            'util',
            'stream',
            'assert',
            'vm',
            'net',
            'querystring',
            'timers',
            'process',
            'Math', // Global Math object
        ]);
    }
    // Analyze the test body for mocked modules
    inspectTestBody(testBody) {
        const mockedMethods = this.findMockedModules(testBody);
        if (mockedMethods.length > 0) {
            mockedMethods.forEach(({ module, method }) => this.handler(module, method));
        }
    }
    findMockedModules(testBody) {
        const mockedModules = [];
        // Regex to find mock, spy, stub, etc.
        const regex = /(?:\w+)\.(spy|stub|mock|spyOn|fn|createStubInstance|createSandbox|td\.func|td\.when|td\.verify|chai\.spy|chai\.stub)\s*\((['"]?)(\w+)\2(?:\.\w+)?/g;
        let match;
        while ((match = regex.exec(testBody)) !== null) {
            const methodName = match[1]; // The method being called (spy, stub, etc.)
            const moduleName = match[3]; // The first argument (the mocked module)
            if (this.whitelistedNodeModules.has(moduleName)) {
                mockedModules.push({ module: moduleName, method: methodName });
            }
        }
        return mockedModules;
    }
    defaultHandler(module, method) {
        const warningMsg = `Detected a mock of module ${module} using method ${method}. Coverage loss due to mocking might occur; unexpected behavior may follow when mocking core modules.`;
        this.logger.warn(warningMsg);
        cockpit_notifier_1.CockpitNotifier.sendWarning(warningMsg);
    }
}
exports.MockInspector = MockInspector;
//# sourceMappingURL=mock-inspector.js.map