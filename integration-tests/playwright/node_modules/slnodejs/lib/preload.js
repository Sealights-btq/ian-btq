const { resolve } = require('node:path');
const { spawnSync } = require('node:child_process');
const { LoggerFactory} = require('../tsOutputs/common/logger')

const logger = LoggerFactory.getCreateApplicationLogger();

function main() {
    if (process.env.PRELOAD_EXECUTED) {
        logger.info('Skipping preload logic on subsequent entry');
        return;
    }

    process.env.PRELOAD_EXECUTED = 1;

    if (require.main === module) {
        logger.info('preload.js is the main module, exiting.');
        process.exit(0);
    }

    const pathToSlAgentCli = resolve(__dirname, './cli.js');

    let token = '--tokenFile ./sltoken.txt';
    if (process.env.SL_token || process.env.SL_TOKEN) {
        token = `--token ${process.env.SL_token || process.env.SL_TOKEN}`;
    } else if (process.env.SL_tokenFile || process.env.SL_TOKEN_FILE) {
        token = `--tokenFile ${process.env.SL_tokenFile || process.env.SL_TOKEN_FILE}`;
    }

    let bsid = '--buildSessionIdFile ./buildSessionId';
    if (process.env.SL_buildSessionId || process.env.SL_BUILD_SESSION_ID) {
        bsid = `--buildSessionId ${process.env.SL_buildSessionId || process.env.SL_BUILD_SESSION_ID}`;
    } else if (process.env.SL_buildSessionIdFile || process.env.SL_BUILD_SESSION_ID_FILE) {
        bsid = `--buildSessionIdFile ${process.env.SL_buildSessionIdFile || process.env.SL_BUILD_SESSION_ID_FILE}`;
    }

    let projectRoot = '';
    if (process.env.SL_projectRoot || process.env.SL_PROJECT_ROOT) {
        projectRoot = `--projectRoot ${process.env.SL_projectRoot || process.env.SL_PROJECT_ROOT}`;
    }

    let labId = '';
    if (process.env.SL_labId || process.env.SL_LAB_ID) {
        labId = `--labId ${process.env.SL_labId || process.env.SL_LAB_ID}`;
    }

    let collectorUrl = '';
    if (process.env.SL_collectorUrl || process.env.SL_COLLECTOR_URL) {
        collectorUrl = `--collectorUrl ${process.env.SL_collectorUrl || process.env.SL_COLLECTOR_URL}`;
    }

    const [argv0, ...restArgv] = process.argv.map(x => x.includes(' ') ? `"${x}"` : x);
    const originalArgv = process.argv.join(' ');
    const args = ['run', ...token.split(' '), ...bsid.split(' '), ...projectRoot.split(' '), ...labId.split(' '), ...collectorUrl.split(' '), '--', ...restArgv]
        .filter(x => x); // remove unset arguments
    const processArgs = [pathToSlAgentCli, ...args];
    process.env.NODE_OPTIONS = '';

    try {
        logger.info(`Rerun main module with args - ${JSON.stringify(processArgs)}`);
        const result = spawnSync(process.argv[0], processArgs, { stdio: 'inherit', shell: false });
        if (result.error) {
            throw result.error;
        }
        process.exit(result.status);
    } catch (error) {
        logger.error('Error occurred while executing the target script:', error);
        logger.info('Run main module with original args - ', originalArgv);
        const result = spawnSync(argv0, originalArgv.split(' '), { stdio: 'inherit', shell: false });
        if (result.error) {
            logger.error('Error occurred while executing the original script:', result.error);
            process.exit(1);
        }
        process.exit(result.status);
    }
}

process.on('uncaughtException', (error) => {
    logger.error('Uncaught Exception:', error);
    process.exit(1);
});

main();
