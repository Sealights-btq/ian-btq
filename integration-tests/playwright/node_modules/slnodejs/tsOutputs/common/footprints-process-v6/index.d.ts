import { AgentConfig } from '../config-process/config';
import { IWatchdog } from '../watchdog';
import { HitsCollector } from './hits-collector';
import { HitsConverter } from './hits-converter';
import { FootprintsBuffer } from './footprints-buffer';
import { StateTracker } from '../state-tracker';
import { IExecutionData, Logger } from '../contracts';
import { StateTrackerFpv6 } from '../state-tracker-fpv6';
import { IBackendProxy } from '../http/backend-proxy-interface';
import { InstrumentationMethodology } from '../../common/http/contracts';
export declare class FootprintsProcess {
    sendToServerWatchdog: IWatchdog;
    keepaliveWatchdog: IWatchdog;
    protected static readonly ALARM_FIRED = "alarm";
    private _cfg;
    protected hitsCollector: HitsCollector;
    private hitsConverter;
    protected footprintsBuffer: FootprintsBuffer;
    private collectionInterval;
    private currentExecutionBsid;
    protected isRunning: boolean;
    protected stateTracker: StateTracker | StateTrackerFpv6;
    protected logger: Logger;
    private _backendProxy;
    private _ongoingRequestsCounter;
    private footprintsEnqueueOnce;
    constructor(cfg: AgentConfig, sendToServerWatchdog: IWatchdog, keepaliveWatchdog: IWatchdog, logger: Logger, hitsCollector: HitsCollector, hitsConverter: HitsConverter, footprintsBuffer: FootprintsBuffer, backendProxy: IBackendProxy, stateTracker: StateTracker | StateTrackerFpv6);
    enqueueCurrentFootprints(execution: IExecutionData, testName: string, isFinalFootprints?: boolean): Promise<void>;
    updateConfig(updatedCfg: AgentConfig): Promise<void>;
    updateInstrumentationMethodology(instrumentationMethodology: InstrumentationMethodology): void;
    getBufferPacket(): Promise<import("./contracts").IFootprintsV6File>;
    private stopIfNeededAfterConfigChanged;
    private ensureKeepaliveThreadRunning;
    submitQueuedFootprints(execution: IExecutionData): Promise<void>;
    submitComponentQueuedFootprints(componentBuildSessionId: string, testStage: string): Promise<void>;
    protected shouldSubmitFootprints(): boolean;
    start(): void;
    stop(): Promise<void>;
    handleTestIdChanged(newTestIdentifier: any, previousTestIdentifier: any): void;
    delegateEvents(): void;
    private enqueueAndSubmit;
    flushCurrentFootprints(isFinalFootprints?: boolean): Promise<void>;
    private checkShouldUpdateCoverageSnapshot;
    private isInitFootprints;
    hasOngoingRequests(): boolean;
    loadSlMapping(): Promise<void>;
    set ongoingRequestsCounter(value: any);
    get backendProxy(): IBackendProxy;
    set backendProxy(value: IBackendProxy);
    get cfg(): AgentConfig;
    set cfg(value: AgentConfig);
}
