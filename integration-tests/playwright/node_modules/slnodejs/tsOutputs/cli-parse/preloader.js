#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Preloader = void 0;
const child_process_1 = require("child_process");
const request = require("sl-request");
const util_1 = require("util");
const requestPromise = (0, util_1.promisify)(request);
const packageName = 'slnodejs';
class Preloader {
    constructor() {
        function getInstalledVersionSync() {
            try {
                // Run 'npm list slnodejs' synchronously and get the output
                const output = (0, child_process_1.execSync)(`npm list ${packageName}`, { cwd: process.cwd() }).toString();
                // Parse the output to find the version of slnodejs at the root
                const lines = output.split('\n');
                const regex = /slnodejs@(\d+\.\d+\.\d+)/;
                // Initialize variable to store the last matched version
                let finalVersion = null;
                for (const line of lines) {
                    console.log(line);
                    const match = line.match(regex);
                    if (match && match.length > 1) {
                        finalVersion = match[1]; // Update finalVersion each time a match is found
                    }
                }
                if (!finalVersion) {
                    console.log('slnodejs is not installed at the root.');
                }
                return finalVersion;
            }
            catch (error) {
                console.error(`Error while executing npm list: ${error.message}`);
                return null;
            }
        }
        this.currentVersion = getInstalledVersionSync();
    }
    getWantedVersion(tokenData) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${tokenData.server}/v2/agents/slnodejs/recommended?customerId=${tokenData.customerid}`;
            try {
                const options = {
                    url: url,
                    headers: {
                        'accept': 'application/json',
                        'Authorization': `Bearer ${tokenData.token}`
                    },
                    json: true // Automatically parses the JSON string in the response
                };
                const response = yield requestPromise(options);
                if (response.statusCode === 404) {
                    console.info('No version lock.');
                    return 'latest';
                }
                if (response.statusCode !== 200) {
                    console.error('Failed to fetch Sealights agent', response.body);
                    throw new Error(`Failed to fetch Sealights agent: ${response.statusCode}`);
                }
                return response.body.agent.version;
            }
            catch (error) {
                console.error('Failed to fetch Sealights agent', error);
                throw error;
            }
        });
    }
    runWithControlledVersion(tokenData) {
        return __awaiter(this, void 0, void 0, function* () {
            function removeArgAndValue(argv, argName) {
                // Find the index of the argument
                const index = argv.indexOf(argName);
                // If the argument is found and there's a subsequent value, remove both
                if (index > -1 && index < argv.length - 1) {
                    argv.splice(index, 2); // Removes the argument and its following value
                }
                return argv;
            }
            const wantedVersion = yield this.getWantedVersion(tokenData);
            try {
                // Compare versions
                if (this.currentVersion !== wantedVersion) {
                    console.log(`Updating ${packageName} from ${this.currentVersion} to ${wantedVersion}...`);
                    // Update the package
                    console.log((0, child_process_1.execSync)(`npm install ${packageName}@${wantedVersion}`).toString());
                    console.log((0, child_process_1.execSync)(`npm list  ${packageName}`).toString());
                    console.log(`${packageName} updated to version ${wantedVersion}`);
                }
                // Continue with the rest of your script
                console.log('Running the package...');
                // Re-execute the updated script
                const nodePath = process.argv[0];
                const scriptPath = process.argv[1];
                const cleanedArgv = removeArgAndValue([...process.argv], '--beControlledVersions');
                const args = cleanedArgv.slice(2).map(arg => (arg.startsWith('-') ? arg : `"${arg}"`)).join(' ');
                const command = `"${nodePath}" "${scriptPath}" ${args}`;
                return (0, child_process_1.execSync)(command, { stdio: 'inherit' }).toString();
            }
            catch (error) {
                console.error('Failed to check for updates or run the package:', error);
                process.exit(1);
            }
        });
    }
}
exports.Preloader = Preloader;
//# sourceMappingURL=preloader.js.map