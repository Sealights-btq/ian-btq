"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mapIstanbulCoverage = mapIstanbulCoverage;
exports.filterAndRemoveKeys = filterAndRemoveKeys;
function mapIstanbulCoverage(allCoverageObjects) {
    const mappedFileCoverage = Object.keys(allCoverageObjects).reduce((acc, coveragePath) => {
        const functionsCoverage = filterAndRemoveKeys(allCoverageObjects[coveragePath]);
        acc[coveragePath] = {
            b: allCoverageObjects[coveragePath].b,
            branchMap: allCoverageObjects[coveragePath].branchMap,
            f: functionsCoverage.f,
            fnMap: functionsCoverage.fnMap,
            hash: allCoverageObjects[coveragePath].hash,
            path: allCoverageObjects[coveragePath].path,
            s: allCoverageObjects[coveragePath].s,
            statementMap: allCoverageObjects[coveragePath].statementMap,
            _coverageSchema: allCoverageObjects[coveragePath]._coverageSchema,
        };
        return acc;
    }, {});
    return mappedFileCoverage;
}
function filterAndRemoveKeys(functionMapAndCoverage) {
    let { fnMap } = functionMapAndCoverage;
    const { f } = functionMapAndCoverage;
    if (!fnMap) {
        fnMap = {};
    }
    const filteredKeys = Object.keys(f).filter((key) => f[key] !== 0);
    const filteredObj = {
        f: filteredKeys.reduce((acc, key) => {
            acc[key] = f[key];
            return acc;
        }, {}),
        fnMap: Object.keys(fnMap)
            .filter((key) => filteredKeys.includes(key))
            .reduce((acc, key) => {
            acc[key] = fnMap[key];
            return acc;
        }, {}),
    };
    return filteredObj;
}
//# sourceMappingURL=coverage.js.map